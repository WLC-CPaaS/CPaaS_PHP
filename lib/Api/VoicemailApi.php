<?php
/**
 * VoicemailApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * VoicemailApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VoicemailApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v1AccountAccountIDVoicemailGet' => [
            'application/json',
        ],
        'v1AccountAccountIDVoicemailPost' => [
            'application/json',
        ],
        'v1AccountAccountIDVoicemailVoicemailIDDelete' => [
            'application/json',
        ],
        'v1AccountAccountIDVoicemailVoicemailIDGet' => [
            'application/json',
        ],
        'v1AccountAccountIDVoicemailVoicemailIDMessageGet' => [
            'application/json',
        ],
        'v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete' => [
            'application/json',
        ],
        'v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet' => [
            'application/json',
        ],
        'v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut' => [
            'application/json',
        ],
        'v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet' => [
            'application/json',
        ],
        'v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost' => [
            'multipart/form-data',
        ],
        'v1AccountAccountIDVoicemailVoicemailIDMessagePost' => [
            'application/json',
        ],
        'v1AccountAccountIDVoicemailVoicemailIDPut' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1AccountAccountIDVoicemailGet
     *
     * Get Voicemail Box List
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string|null $start_key start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param  int|null $page_size number of records to return, range 1 to 50 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsVoicemailGetAll|\OpenAPI\Client\Model\CPAASError
     */
    public function v1AccountAccountIDVoicemailGet($account_id, $start_key = null, $page_size = null, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailGet'][0])
    {
        list($response) = $this->v1AccountAccountIDVoicemailGetWithHttpInfo($account_id, $start_key, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation v1AccountAccountIDVoicemailGetWithHttpInfo
     *
     * Get Voicemail Box List
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string|null $start_key start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param  int|null $page_size number of records to return, range 1 to 50 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsVoicemailGetAll|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AccountAccountIDVoicemailGetWithHttpInfo($account_id, $start_key = null, $page_size = null, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailGet'][0])
    {
        $request = $this->v1AccountAccountIDVoicemailGetRequest($account_id, $start_key, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailGetAll',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsVoicemailGetAll',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailGetAll',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AccountAccountIDVoicemailGetAsync
     *
     * Get Voicemail Box List
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string|null $start_key start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param  int|null $page_size number of records to return, range 1 to 50 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailGetAsync($account_id, $start_key = null, $page_size = null, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailGet'][0])
    {
        return $this->v1AccountAccountIDVoicemailGetAsyncWithHttpInfo($account_id, $start_key, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AccountAccountIDVoicemailGetAsyncWithHttpInfo
     *
     * Get Voicemail Box List
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string|null $start_key start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param  int|null $page_size number of records to return, range 1 to 50 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailGetAsyncWithHttpInfo($account_id, $start_key = null, $page_size = null, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsVoicemailGetAll';
        $request = $this->v1AccountAccountIDVoicemailGetRequest($account_id, $start_key, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AccountAccountIDVoicemailGet'
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string|null $start_key start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param  int|null $page_size number of records to return, range 1 to 50 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AccountAccountIDVoicemailGetRequest($account_id, $start_key = null, $page_size = null, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailGet'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling v1AccountAccountIDVoicemailGet'
            );
        }




        $resourcePath = '/v1/account/{accountID}/voicemail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_key,
            'start_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AccountAccountIDVoicemailPost
     *
     * Create Voicemail Box
     *
     * @param  string $account_id account ID, 32 alphanumeric (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailAddEditData $voicemail voicemail payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle|\OpenAPI\Client\Model\CPAASError
     */
    public function v1AccountAccountIDVoicemailPost($account_id, $voicemail, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailPost'][0])
    {
        list($response) = $this->v1AccountAccountIDVoicemailPostWithHttpInfo($account_id, $voicemail, $contentType);
        return $response;
    }

    /**
     * Operation v1AccountAccountIDVoicemailPostWithHttpInfo
     *
     * Create Voicemail Box
     *
     * @param  string $account_id account ID, 32 alphanumeric (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailAddEditData $voicemail voicemail payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AccountAccountIDVoicemailPostWithHttpInfo($account_id, $voicemail, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailPost'][0])
    {
        $request = $this->v1AccountAccountIDVoicemailPostRequest($account_id, $voicemail, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AccountAccountIDVoicemailPostAsync
     *
     * Create Voicemail Box
     *
     * @param  string $account_id account ID, 32 alphanumeric (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailAddEditData $voicemail voicemail payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailPostAsync($account_id, $voicemail, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailPost'][0])
    {
        return $this->v1AccountAccountIDVoicemailPostAsyncWithHttpInfo($account_id, $voicemail, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AccountAccountIDVoicemailPostAsyncWithHttpInfo
     *
     * Create Voicemail Box
     *
     * @param  string $account_id account ID, 32 alphanumeric (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailAddEditData $voicemail voicemail payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailPostAsyncWithHttpInfo($account_id, $voicemail, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle';
        $request = $this->v1AccountAccountIDVoicemailPostRequest($account_id, $voicemail, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AccountAccountIDVoicemailPost'
     *
     * @param  string $account_id account ID, 32 alphanumeric (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailAddEditData $voicemail voicemail payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AccountAccountIDVoicemailPostRequest($account_id, $voicemail, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailPost'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling v1AccountAccountIDVoicemailPost'
            );
        }

        // verify the required parameter 'voicemail' is set
        if ($voicemail === null || (is_array($voicemail) && count($voicemail) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voicemail when calling v1AccountAccountIDVoicemailPost'
            );
        }


        $resourcePath = '/v1/account/{accountID}/voicemail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($voicemail)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($voicemail));
            } else {
                $httpBody = $voicemail;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDDelete
     *
     * Delete Voicemail Box
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle|\OpenAPI\Client\Model\CPAASError
     */
    public function v1AccountAccountIDVoicemailVoicemailIDDelete($account_id, $voicemail_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDDelete'][0])
    {
        list($response) = $this->v1AccountAccountIDVoicemailVoicemailIDDeleteWithHttpInfo($account_id, $voicemail_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDDeleteWithHttpInfo
     *
     * Delete Voicemail Box
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AccountAccountIDVoicemailVoicemailIDDeleteWithHttpInfo($account_id, $voicemail_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDDelete'][0])
    {
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDDeleteRequest($account_id, $voicemail_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDDeleteAsync
     *
     * Delete Voicemail Box
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDDeleteAsync($account_id, $voicemail_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDDelete'][0])
    {
        return $this->v1AccountAccountIDVoicemailVoicemailIDDeleteAsyncWithHttpInfo($account_id, $voicemail_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDDeleteAsyncWithHttpInfo
     *
     * Delete Voicemail Box
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDDeleteAsyncWithHttpInfo($account_id, $voicemail_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle';
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDDeleteRequest($account_id, $voicemail_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AccountAccountIDVoicemailVoicemailIDDelete'
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AccountAccountIDVoicemailVoicemailIDDeleteRequest($account_id, $voicemail_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDDelete'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling v1AccountAccountIDVoicemailVoicemailIDDelete'
            );
        }

        // verify the required parameter 'voicemail_id' is set
        if ($voicemail_id === null || (is_array($voicemail_id) && count($voicemail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voicemail_id when calling v1AccountAccountIDVoicemailVoicemailIDDelete'
            );
        }


        $resourcePath = '/v1/account/{accountID}/voicemail/{voicemailID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($voicemail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'voicemailID' . '}',
                ObjectSerializer::toPathValue($voicemail_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDGet
     *
     * Get Voicemail Box Details
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle|\OpenAPI\Client\Model\CPAASError
     */
    public function v1AccountAccountIDVoicemailVoicemailIDGet($account_id, $voicemail_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDGet'][0])
    {
        list($response) = $this->v1AccountAccountIDVoicemailVoicemailIDGetWithHttpInfo($account_id, $voicemail_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDGetWithHttpInfo
     *
     * Get Voicemail Box Details
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AccountAccountIDVoicemailVoicemailIDGetWithHttpInfo($account_id, $voicemail_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDGet'][0])
    {
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDGetRequest($account_id, $voicemail_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDGetAsync
     *
     * Get Voicemail Box Details
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDGetAsync($account_id, $voicemail_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDGet'][0])
    {
        return $this->v1AccountAccountIDVoicemailVoicemailIDGetAsyncWithHttpInfo($account_id, $voicemail_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDGetAsyncWithHttpInfo
     *
     * Get Voicemail Box Details
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDGetAsyncWithHttpInfo($account_id, $voicemail_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle';
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDGetRequest($account_id, $voicemail_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AccountAccountIDVoicemailVoicemailIDGet'
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AccountAccountIDVoicemailVoicemailIDGetRequest($account_id, $voicemail_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDGet'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling v1AccountAccountIDVoicemailVoicemailIDGet'
            );
        }

        // verify the required parameter 'voicemail_id' is set
        if ($voicemail_id === null || (is_array($voicemail_id) && count($voicemail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voicemail_id when calling v1AccountAccountIDVoicemailVoicemailIDGet'
            );
        }


        $resourcePath = '/v1/account/{accountID}/voicemail/{voicemailID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($voicemail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'voicemailID' . '}',
                ObjectSerializer::toPathValue($voicemail_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageGet
     *
     * Get Voicemail Message List
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id voicemail ID, 32 alpha numeric (required)
     * @param  string|null $start_key start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param  int|null $page_size number of records to return, range 1 to 50 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetAll|\OpenAPI\Client\Model\CPAASError
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageGet($account_id, $voicemail_id, $start_key = null, $page_size = null, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageGet'][0])
    {
        list($response) = $this->v1AccountAccountIDVoicemailVoicemailIDMessageGetWithHttpInfo($account_id, $voicemail_id, $start_key, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageGetWithHttpInfo
     *
     * Get Voicemail Message List
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id voicemail ID, 32 alpha numeric (required)
     * @param  string|null $start_key start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param  int|null $page_size number of records to return, range 1 to 50 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetAll|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageGetWithHttpInfo($account_id, $voicemail_id, $start_key = null, $page_size = null, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageGet'][0])
    {
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDMessageGetRequest($account_id, $voicemail_id, $start_key, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetAll',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetAll',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetAll',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageGetAsync
     *
     * Get Voicemail Message List
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id voicemail ID, 32 alpha numeric (required)
     * @param  string|null $start_key start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param  int|null $page_size number of records to return, range 1 to 50 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageGetAsync($account_id, $voicemail_id, $start_key = null, $page_size = null, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageGet'][0])
    {
        return $this->v1AccountAccountIDVoicemailVoicemailIDMessageGetAsyncWithHttpInfo($account_id, $voicemail_id, $start_key, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageGetAsyncWithHttpInfo
     *
     * Get Voicemail Message List
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id voicemail ID, 32 alpha numeric (required)
     * @param  string|null $start_key start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param  int|null $page_size number of records to return, range 1 to 50 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageGetAsyncWithHttpInfo($account_id, $voicemail_id, $start_key = null, $page_size = null, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetAll';
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDMessageGetRequest($account_id, $voicemail_id, $start_key, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AccountAccountIDVoicemailVoicemailIDMessageGet'
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id voicemail ID, 32 alpha numeric (required)
     * @param  string|null $start_key start_key for pagination that was returned as next_start_key from your previous call (optional)
     * @param  int|null $page_size number of records to return, range 1 to 50 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageGetRequest($account_id, $voicemail_id, $start_key = null, $page_size = null, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageGet'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageGet'
            );
        }

        // verify the required parameter 'voicemail_id' is set
        if ($voicemail_id === null || (is_array($voicemail_id) && count($voicemail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voicemail_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageGet'
            );
        }




        $resourcePath = '/v1/account/{accountID}/voicemail/{voicemailID}/message';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_key,
            'start_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($voicemail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'voicemailID' . '}',
                ObjectSerializer::toPathValue($voicemail_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete
     *
     * Delete Voicemail Message
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $message_id message ID, 32 alpha numeric (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle|\OpenAPI\Client\Model\CPAASError
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete($account_id, $voicemail_id, $message_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete'][0])
    {
        list($response) = $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteWithHttpInfo($account_id, $voicemail_id, $message_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteWithHttpInfo
     *
     * Delete Voicemail Message
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $message_id message ID, 32 alpha numeric (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteWithHttpInfo($account_id, $voicemail_id, $message_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete'][0])
    {
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteRequest($account_id, $voicemail_id, $message_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteAsync
     *
     * Delete Voicemail Message
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $message_id message ID, 32 alpha numeric (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteAsync($account_id, $voicemail_id, $message_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete'][0])
    {
        return $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteAsyncWithHttpInfo($account_id, $voicemail_id, $message_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteAsyncWithHttpInfo
     *
     * Delete Voicemail Message
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $message_id message ID, 32 alpha numeric (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteAsyncWithHttpInfo($account_id, $voicemail_id, $message_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle';
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteRequest($account_id, $voicemail_id, $message_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete'
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $message_id message ID, 32 alpha numeric (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDeleteRequest($account_id, $voicemail_id, $message_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete'
            );
        }

        // verify the required parameter 'voicemail_id' is set
        if ($voicemail_id === null || (is_array($voicemail_id) && count($voicemail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voicemail_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete'
            );
        }

        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDDelete'
            );
        }


        $resourcePath = '/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($voicemail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'voicemailID' . '}',
                ObjectSerializer::toPathValue($voicemail_id),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'messageID' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet
     *
     * Get Voicemail Message Details
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $message_id Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle|\OpenAPI\Client\Model\CPAASError
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet($account_id, $voicemail_id, $message_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet'][0])
    {
        list($response) = $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetWithHttpInfo($account_id, $voicemail_id, $message_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetWithHttpInfo
     *
     * Get Voicemail Message Details
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $message_id Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetWithHttpInfo($account_id, $voicemail_id, $message_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet'][0])
    {
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetRequest($account_id, $voicemail_id, $message_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetAsync
     *
     * Get Voicemail Message Details
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $message_id Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetAsync($account_id, $voicemail_id, $message_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet'][0])
    {
        return $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetAsyncWithHttpInfo($account_id, $voicemail_id, $message_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetAsyncWithHttpInfo
     *
     * Get Voicemail Message Details
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $message_id Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetAsyncWithHttpInfo($account_id, $voicemail_id, $message_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle';
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetRequest($account_id, $voicemail_id, $message_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet'
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $message_id Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGetRequest($account_id, $voicemail_id, $message_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet'
            );
        }

        // verify the required parameter 'voicemail_id' is set
        if ($voicemail_id === null || (is_array($voicemail_id) && count($voicemail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voicemail_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet'
            );
        }

        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDGet'
            );
        }


        $resourcePath = '/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($voicemail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'voicemailID' . '}',
                ObjectSerializer::toPathValue($voicemail_id),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'messageID' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut
     *
     * Update Voicemail Message
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $message_id Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailMessageChange $req_body payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle|\OpenAPI\Client\Model\CPAASError
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut($account_id, $voicemail_id, $message_id, $req_body, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut'][0])
    {
        list($response) = $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutWithHttpInfo($account_id, $voicemail_id, $message_id, $req_body, $contentType);
        return $response;
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutWithHttpInfo
     *
     * Update Voicemail Message
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $message_id Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailMessageChange $req_body payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutWithHttpInfo($account_id, $voicemail_id, $message_id, $req_body, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut'][0])
    {
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutRequest($account_id, $voicemail_id, $message_id, $req_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutAsync
     *
     * Update Voicemail Message
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $message_id Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailMessageChange $req_body payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutAsync($account_id, $voicemail_id, $message_id, $req_body, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut'][0])
    {
        return $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutAsyncWithHttpInfo($account_id, $voicemail_id, $message_id, $req_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutAsyncWithHttpInfo
     *
     * Update Voicemail Message
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $message_id Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailMessageChange $req_body payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutAsyncWithHttpInfo($account_id, $voicemail_id, $message_id, $req_body, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle';
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutRequest($account_id, $voicemail_id, $message_id, $req_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut'
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  string $message_id Message ID, 39 (yyyymm-&lt;32 id&gt;) (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailMessageChange $req_body payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPutRequest($account_id, $voicemail_id, $message_id, $req_body, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut'
            );
        }

        // verify the required parameter 'voicemail_id' is set
        if ($voicemail_id === null || (is_array($voicemail_id) && count($voicemail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voicemail_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut'
            );
        }

        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut'
            );
        }

        // verify the required parameter 'req_body' is set
        if ($req_body === null || (is_array($req_body) && count($req_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $req_body when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDPut'
            );
        }


        $resourcePath = '/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($voicemail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'voicemailID' . '}',
                ObjectSerializer::toPathValue($voicemail_id),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'messageID' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($req_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($req_body));
            } else {
                $httpBody = $req_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet
     *
     * Get Voicemail Message File
     *
     * @param  string $account_id Account ID, unique 32-character alphanumeric identifier (required)
     * @param  string $voicemail_id Voicemail Box ID, unique 32-character alphanumeric identifier (required)
     * @param  string $message_id Message ID, unique 32-character alphanumeric identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\CPAASError
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet($account_id, $voicemail_id, $message_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet'][0])
    {
        list($response) = $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetWithHttpInfo($account_id, $voicemail_id, $message_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetWithHttpInfo
     *
     * Get Voicemail Message File
     *
     * @param  string $account_id Account ID, unique 32-character alphanumeric identifier (required)
     * @param  string $voicemail_id Voicemail Box ID, unique 32-character alphanumeric identifier (required)
     * @param  string $message_id Message ID, unique 32-character alphanumeric identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetWithHttpInfo($account_id, $voicemail_id, $message_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet'][0])
    {
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetRequest($account_id, $voicemail_id, $message_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SplFileObject',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SplFileObject',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetAsync
     *
     * Get Voicemail Message File
     *
     * @param  string $account_id Account ID, unique 32-character alphanumeric identifier (required)
     * @param  string $voicemail_id Voicemail Box ID, unique 32-character alphanumeric identifier (required)
     * @param  string $message_id Message ID, unique 32-character alphanumeric identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetAsync($account_id, $voicemail_id, $message_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet'][0])
    {
        return $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetAsyncWithHttpInfo($account_id, $voicemail_id, $message_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetAsyncWithHttpInfo
     *
     * Get Voicemail Message File
     *
     * @param  string $account_id Account ID, unique 32-character alphanumeric identifier (required)
     * @param  string $voicemail_id Voicemail Box ID, unique 32-character alphanumeric identifier (required)
     * @param  string $message_id Message ID, unique 32-character alphanumeric identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetAsyncWithHttpInfo($account_id, $voicemail_id, $message_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetRequest($account_id, $voicemail_id, $message_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet'
     *
     * @param  string $account_id Account ID, unique 32-character alphanumeric identifier (required)
     * @param  string $voicemail_id Voicemail Box ID, unique 32-character alphanumeric identifier (required)
     * @param  string $message_id Message ID, unique 32-character alphanumeric identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGetRequest($account_id, $voicemail_id, $message_id, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet'
            );
        }

        // verify the required parameter 'voicemail_id' is set
        if ($voicemail_id === null || (is_array($voicemail_id) && count($voicemail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voicemail_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet'
            );
        }

        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawGet'
            );
        }


        $resourcePath = '/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}/raw';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($voicemail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'voicemailID' . '}',
                ObjectSerializer::toPathValue($voicemail_id),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'messageID' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost
     *
     * Add Voicemail Message File
     *
     * @param  string $account_id Account ID, 32 alphanumeric characters (required)
     * @param  string $voicemail_id Voicemail ID, 32 alphanumeric characters (required)
     * @param  string $message_id Message ID, 32 alphanumeric characters (required)
     * @param  \SplFileObject $file Audio file to upload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>|\OpenAPI\Client\Model\CPAASError
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost($account_id, $voicemail_id, $message_id, $file, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost'][0])
    {
        list($response) = $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostWithHttpInfo($account_id, $voicemail_id, $message_id, $file, $contentType);
        return $response;
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostWithHttpInfo
     *
     * Add Voicemail Message File
     *
     * @param  string $account_id Account ID, 32 alphanumeric characters (required)
     * @param  string $voicemail_id Voicemail ID, 32 alphanumeric characters (required)
     * @param  string $message_id Message ID, 32 alphanumeric characters (required)
     * @param  \SplFileObject $file Audio file to upload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostWithHttpInfo($account_id, $voicemail_id, $message_id, $file, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost'][0])
    {
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostRequest($account_id, $voicemail_id, $message_id, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostAsync
     *
     * Add Voicemail Message File
     *
     * @param  string $account_id Account ID, 32 alphanumeric characters (required)
     * @param  string $voicemail_id Voicemail ID, 32 alphanumeric characters (required)
     * @param  string $message_id Message ID, 32 alphanumeric characters (required)
     * @param  \SplFileObject $file Audio file to upload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostAsync($account_id, $voicemail_id, $message_id, $file, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost'][0])
    {
        return $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostAsyncWithHttpInfo($account_id, $voicemail_id, $message_id, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostAsyncWithHttpInfo
     *
     * Add Voicemail Message File
     *
     * @param  string $account_id Account ID, 32 alphanumeric characters (required)
     * @param  string $voicemail_id Voicemail ID, 32 alphanumeric characters (required)
     * @param  string $message_id Message ID, 32 alphanumeric characters (required)
     * @param  \SplFileObject $file Audio file to upload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostAsyncWithHttpInfo($account_id, $voicemail_id, $message_id, $file, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostRequest($account_id, $voicemail_id, $message_id, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost'
     *
     * @param  string $account_id Account ID, 32 alphanumeric characters (required)
     * @param  string $voicemail_id Voicemail ID, 32 alphanumeric characters (required)
     * @param  string $message_id Message ID, 32 alphanumeric characters (required)
     * @param  \SplFileObject $file Audio file to upload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPostRequest($account_id, $voicemail_id, $message_id, $file, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost'
            );
        }

        // verify the required parameter 'voicemail_id' is set
        if ($voicemail_id === null || (is_array($voicemail_id) && count($voicemail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voicemail_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost'
            );
        }

        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost'
            );
        }

        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling v1AccountAccountIDVoicemailVoicemailIDMessageMessageIDRawPost'
            );
        }


        $resourcePath = '/v1/account/{accountID}/voicemail/{voicemailID}/message/{messageID}/raw';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($voicemail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'voicemailID' . '}',
                ObjectSerializer::toPathValue($voicemail_id),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'messageID' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }

        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'file' => $file,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessagePost
     *
     * Create Voicemail Message
     *
     * @param  string $account_id account ID, 32 alphanumeric (required)
     * @param  string $voicemail_id voicemail ID, 32 alphanumeric (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailMessageAddData $message voicemail message payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle|\OpenAPI\Client\Model\CPAASError
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessagePost($account_id, $voicemail_id, $message, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessagePost'][0])
    {
        list($response) = $this->v1AccountAccountIDVoicemailVoicemailIDMessagePostWithHttpInfo($account_id, $voicemail_id, $message, $contentType);
        return $response;
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessagePostWithHttpInfo
     *
     * Create Voicemail Message
     *
     * @param  string $account_id account ID, 32 alphanumeric (required)
     * @param  string $voicemail_id voicemail ID, 32 alphanumeric (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailMessageAddData $message voicemail message payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessagePostWithHttpInfo($account_id, $voicemail_id, $message, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessagePost'][0])
    {
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDMessagePostRequest($account_id, $voicemail_id, $message, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessagePostAsync
     *
     * Create Voicemail Message
     *
     * @param  string $account_id account ID, 32 alphanumeric (required)
     * @param  string $voicemail_id voicemail ID, 32 alphanumeric (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailMessageAddData $message voicemail message payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessagePostAsync($account_id, $voicemail_id, $message, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessagePost'][0])
    {
        return $this->v1AccountAccountIDVoicemailVoicemailIDMessagePostAsyncWithHttpInfo($account_id, $voicemail_id, $message, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDMessagePostAsyncWithHttpInfo
     *
     * Create Voicemail Message
     *
     * @param  string $account_id account ID, 32 alphanumeric (required)
     * @param  string $voicemail_id voicemail ID, 32 alphanumeric (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailMessageAddData $message voicemail message payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessagePostAsyncWithHttpInfo($account_id, $voicemail_id, $message, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessagePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsVoicemailMessageGetSingle';
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDMessagePostRequest($account_id, $voicemail_id, $message, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AccountAccountIDVoicemailVoicemailIDMessagePost'
     *
     * @param  string $account_id account ID, 32 alphanumeric (required)
     * @param  string $voicemail_id voicemail ID, 32 alphanumeric (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailMessageAddData $message voicemail message payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AccountAccountIDVoicemailVoicemailIDMessagePostRequest($account_id, $voicemail_id, $message, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDMessagePost'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost'
            );
        }

        // verify the required parameter 'voicemail_id' is set
        if ($voicemail_id === null || (is_array($voicemail_id) && count($voicemail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voicemail_id when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost'
            );
        }

        // verify the required parameter 'message' is set
        if ($message === null || (is_array($message) && count($message) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message when calling v1AccountAccountIDVoicemailVoicemailIDMessagePost'
            );
        }


        $resourcePath = '/v1/account/{accountID}/voicemail/{voicemailID}/message';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($voicemail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'voicemailID' . '}',
                ObjectSerializer::toPathValue($voicemail_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($message)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($message));
            } else {
                $httpBody = $message;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDPut
     *
     * Update Voicemail Box
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailAddEditData $req_body payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle|\OpenAPI\Client\Model\CPAASError
     */
    public function v1AccountAccountIDVoicemailVoicemailIDPut($account_id, $voicemail_id, $req_body, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDPut'][0])
    {
        list($response) = $this->v1AccountAccountIDVoicemailVoicemailIDPutWithHttpInfo($account_id, $voicemail_id, $req_body, $contentType);
        return $response;
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDPutWithHttpInfo
     *
     * Update Voicemail Box
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailAddEditData $req_body payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AccountAccountIDVoicemailVoicemailIDPutWithHttpInfo($account_id, $voicemail_id, $req_body, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDPut'][0])
    {
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDPutRequest($account_id, $voicemail_id, $req_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDPutAsync
     *
     * Update Voicemail Box
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailAddEditData $req_body payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDPutAsync($account_id, $voicemail_id, $req_body, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDPut'][0])
    {
        return $this->v1AccountAccountIDVoicemailVoicemailIDPutAsyncWithHttpInfo($account_id, $voicemail_id, $req_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AccountAccountIDVoicemailVoicemailIDPutAsyncWithHttpInfo
     *
     * Update Voicemail Box
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailAddEditData $req_body payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDVoicemailVoicemailIDPutAsyncWithHttpInfo($account_id, $voicemail_id, $req_body, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsVoicemailGetSingle';
        $request = $this->v1AccountAccountIDVoicemailVoicemailIDPutRequest($account_id, $voicemail_id, $req_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AccountAccountIDVoicemailVoicemailIDPut'
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $voicemail_id Voicemail ID, 32 alpha numeric (required)
     * @param  \OpenAPI\Client\Model\ServiceVOIPVoicemailAddEditData $req_body payload fields (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AccountAccountIDVoicemailVoicemailIDPutRequest($account_id, $voicemail_id, $req_body, string $contentType = self::contentTypes['v1AccountAccountIDVoicemailVoicemailIDPut'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling v1AccountAccountIDVoicemailVoicemailIDPut'
            );
        }

        // verify the required parameter 'voicemail_id' is set
        if ($voicemail_id === null || (is_array($voicemail_id) && count($voicemail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voicemail_id when calling v1AccountAccountIDVoicemailVoicemailIDPut'
            );
        }

        // verify the required parameter 'req_body' is set
        if ($req_body === null || (is_array($req_body) && count($req_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $req_body when calling v1AccountAccountIDVoicemailVoicemailIDPut'
            );
        }


        $resourcePath = '/v1/account/{accountID}/voicemail/{voicemailID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($voicemail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'voicemailID' . '}',
                ObjectSerializer::toPathValue($voicemail_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($req_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($req_body));
            } else {
                $httpBody = $req_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
