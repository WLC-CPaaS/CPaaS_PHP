<?php
/**
 * ProvisioningApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ProvisioningApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProvisioningApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v1ApBrandBrandFamilyFamilyGet' => [
            'application/json',
        ],
        'v1ApBrandBrandFamilyFamilyModelGet' => [
            'application/json',
        ],
        'v1ApBrandBrandFamilyFamilyModelModelGet' => [
            'application/json',
        ],
        'v1ApBrandBrandFamilyFamilyModelModelTemplateGet' => [
            'application/json',
        ],
        'v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet' => [
            'application/json',
        ],
        'v1ApBrandBrandFamilyGet' => [
            'application/json',
        ],
        'v1ApBrandBrandGet' => [
            'application/json',
        ],
        'v1ApBrandGet' => [
            'application/json',
        ],
        'v1ApConfigfileGeneratePost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyGet
     *
     * Get Family
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProvisioningDocsDocsFamilyOutputSingle|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError
     */
    public function v1ApBrandBrandFamilyFamilyGet($brand, $family, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyGet'][0])
    {
        list($response) = $this->v1ApBrandBrandFamilyFamilyGetWithHttpInfo($brand, $family, $contentType);
        return $response;
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyGetWithHttpInfo
     *
     * Get Family
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProvisioningDocsDocsFamilyOutputSingle|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApBrandBrandFamilyFamilyGetWithHttpInfo($brand, $family, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyGet'][0])
    {
        $request = $this->v1ApBrandBrandFamilyFamilyGetRequest($brand, $family, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsFamilyOutputSingle',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ProvisioningDocsDocsFamilyOutputSingle',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsFamilyOutputSingle',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyGetAsync
     *
     * Get Family
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApBrandBrandFamilyFamilyGetAsync($brand, $family, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyGet'][0])
    {
        return $this->v1ApBrandBrandFamilyFamilyGetAsyncWithHttpInfo($brand, $family, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyGetAsyncWithHttpInfo
     *
     * Get Family
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApBrandBrandFamilyFamilyGetAsyncWithHttpInfo($brand, $family, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProvisioningDocsDocsFamilyOutputSingle';
        $request = $this->v1ApBrandBrandFamilyFamilyGetRequest($brand, $family, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApBrandBrandFamilyFamilyGet'
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ApBrandBrandFamilyFamilyGetRequest($brand, $family, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyGet'][0])
    {

        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling v1ApBrandBrandFamilyFamilyGet'
            );
        }

        // verify the required parameter 'family' is set
        if ($family === null || (is_array($family) && count($family) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $family when calling v1ApBrandBrandFamilyFamilyGet'
            );
        }


        $resourcePath = '/v1/ap/brand/{brand}/family/{family}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($brand !== null) {
            $resourcePath = str_replace(
                '{' . 'brand' . '}',
                ObjectSerializer::toPathValue($brand),
                $resourcePath
            );
        }
        // path params
        if ($family !== null) {
            $resourcePath = str_replace(
                '{' . 'family' . '}',
                ObjectSerializer::toPathValue($family),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyModelGet
     *
     * Get Model List
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string|null $model_name model_name (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  string|null $start_key start_key (optional)
     * @param  string|null $status status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProvisioningDocsDocsModelOutput|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError
     */
    public function v1ApBrandBrandFamilyFamilyModelGet($brand, $family, $model_name = null, $page_size = null, $start_key = null, $status = null, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelGet'][0])
    {
        list($response) = $this->v1ApBrandBrandFamilyFamilyModelGetWithHttpInfo($brand, $family, $model_name, $page_size, $start_key, $status, $contentType);
        return $response;
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyModelGetWithHttpInfo
     *
     * Get Model List
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string|null $model_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProvisioningDocsDocsModelOutput|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApBrandBrandFamilyFamilyModelGetWithHttpInfo($brand, $family, $model_name = null, $page_size = null, $start_key = null, $status = null, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelGet'][0])
    {
        $request = $this->v1ApBrandBrandFamilyFamilyModelGetRequest($brand, $family, $model_name, $page_size, $start_key, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsModelOutput',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ProvisioningDocsDocsModelOutput',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsModelOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyModelGetAsync
     *
     * Get Model List
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string|null $model_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApBrandBrandFamilyFamilyModelGetAsync($brand, $family, $model_name = null, $page_size = null, $start_key = null, $status = null, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelGet'][0])
    {
        return $this->v1ApBrandBrandFamilyFamilyModelGetAsyncWithHttpInfo($brand, $family, $model_name, $page_size, $start_key, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyModelGetAsyncWithHttpInfo
     *
     * Get Model List
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string|null $model_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApBrandBrandFamilyFamilyModelGetAsyncWithHttpInfo($brand, $family, $model_name = null, $page_size = null, $start_key = null, $status = null, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProvisioningDocsDocsModelOutput';
        $request = $this->v1ApBrandBrandFamilyFamilyModelGetRequest($brand, $family, $model_name, $page_size, $start_key, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApBrandBrandFamilyFamilyModelGet'
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string|null $model_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ApBrandBrandFamilyFamilyModelGetRequest($brand, $family, $model_name = null, $page_size = null, $start_key = null, $status = null, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelGet'][0])
    {

        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling v1ApBrandBrandFamilyFamilyModelGet'
            );
        }

        // verify the required parameter 'family' is set
        if ($family === null || (is_array($family) && count($family) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $family when calling v1ApBrandBrandFamilyFamilyModelGet'
            );
        }






        $resourcePath = '/v1/ap/brand/{brand}/family/{family}/model';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $model_name,
            'model_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_key,
            'start_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($brand !== null) {
            $resourcePath = str_replace(
                '{' . 'brand' . '}',
                ObjectSerializer::toPathValue($brand),
                $resourcePath
            );
        }
        // path params
        if ($family !== null) {
            $resourcePath = str_replace(
                '{' . 'family' . '}',
                ObjectSerializer::toPathValue($family),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyModelModelGet
     *
     * Get Model
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProvisioningDocsDocsModelOutputSingle|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError
     */
    public function v1ApBrandBrandFamilyFamilyModelModelGet($brand, $family, $model, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelGet'][0])
    {
        list($response) = $this->v1ApBrandBrandFamilyFamilyModelModelGetWithHttpInfo($brand, $family, $model, $contentType);
        return $response;
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyModelModelGetWithHttpInfo
     *
     * Get Model
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProvisioningDocsDocsModelOutputSingle|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApBrandBrandFamilyFamilyModelModelGetWithHttpInfo($brand, $family, $model, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelGet'][0])
    {
        $request = $this->v1ApBrandBrandFamilyFamilyModelModelGetRequest($brand, $family, $model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsModelOutputSingle',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ProvisioningDocsDocsModelOutputSingle',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsModelOutputSingle',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyModelModelGetAsync
     *
     * Get Model
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApBrandBrandFamilyFamilyModelModelGetAsync($brand, $family, $model, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelGet'][0])
    {
        return $this->v1ApBrandBrandFamilyFamilyModelModelGetAsyncWithHttpInfo($brand, $family, $model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyModelModelGetAsyncWithHttpInfo
     *
     * Get Model
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApBrandBrandFamilyFamilyModelModelGetAsyncWithHttpInfo($brand, $family, $model, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProvisioningDocsDocsModelOutputSingle';
        $request = $this->v1ApBrandBrandFamilyFamilyModelModelGetRequest($brand, $family, $model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApBrandBrandFamilyFamilyModelModelGet'
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $model model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ApBrandBrandFamilyFamilyModelModelGetRequest($brand, $family, $model, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelGet'][0])
    {

        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling v1ApBrandBrandFamilyFamilyModelModelGet'
            );
        }

        // verify the required parameter 'family' is set
        if ($family === null || (is_array($family) && count($family) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $family when calling v1ApBrandBrandFamilyFamilyModelModelGet'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling v1ApBrandBrandFamilyFamilyModelModelGet'
            );
        }


        $resourcePath = '/v1/ap/brand/{brand}/family/{family}/model/{model}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($brand !== null) {
            $resourcePath = str_replace(
                '{' . 'brand' . '}',
                ObjectSerializer::toPathValue($brand),
                $resourcePath
            );
        }
        // path params
        if ($family !== null) {
            $resourcePath = str_replace(
                '{' . 'family' . '}',
                ObjectSerializer::toPathValue($family),
                $resourcePath
            );
        }
        // path params
        if ($model !== null) {
            $resourcePath = str_replace(
                '{' . 'model' . '}',
                ObjectSerializer::toPathValue($model),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyModelModelTemplateGet
     *
     * Get Template List
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $model model (required)
     * @param  string|null $firmware firmware (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  string|null $start_key start_key (optional)
     * @param  string|null $status status (optional)
     * @param  string|null $template_name template_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProvisioningDocsDocsTemplatesOutput|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError
     */
    public function v1ApBrandBrandFamilyFamilyModelModelTemplateGet($brand, $family, $model, $firmware = null, $page_size = null, $start_key = null, $status = null, $template_name = null, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateGet'][0])
    {
        list($response) = $this->v1ApBrandBrandFamilyFamilyModelModelTemplateGetWithHttpInfo($brand, $family, $model, $firmware, $page_size, $start_key, $status, $template_name, $contentType);
        return $response;
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyModelModelTemplateGetWithHttpInfo
     *
     * Get Template List
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $model model (required)
     * @param  string|null $firmware (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $status (optional)
     * @param  string|null $template_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProvisioningDocsDocsTemplatesOutput|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApBrandBrandFamilyFamilyModelModelTemplateGetWithHttpInfo($brand, $family, $model, $firmware = null, $page_size = null, $start_key = null, $status = null, $template_name = null, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateGet'][0])
    {
        $request = $this->v1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest($brand, $family, $model, $firmware, $page_size, $start_key, $status, $template_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsTemplatesOutput',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ProvisioningDocsDocsTemplatesOutput',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsTemplatesOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyModelModelTemplateGetAsync
     *
     * Get Template List
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $model model (required)
     * @param  string|null $firmware (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $status (optional)
     * @param  string|null $template_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApBrandBrandFamilyFamilyModelModelTemplateGetAsync($brand, $family, $model, $firmware = null, $page_size = null, $start_key = null, $status = null, $template_name = null, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateGet'][0])
    {
        return $this->v1ApBrandBrandFamilyFamilyModelModelTemplateGetAsyncWithHttpInfo($brand, $family, $model, $firmware, $page_size, $start_key, $status, $template_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyModelModelTemplateGetAsyncWithHttpInfo
     *
     * Get Template List
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $model model (required)
     * @param  string|null $firmware (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $status (optional)
     * @param  string|null $template_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApBrandBrandFamilyFamilyModelModelTemplateGetAsyncWithHttpInfo($brand, $family, $model, $firmware = null, $page_size = null, $start_key = null, $status = null, $template_name = null, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProvisioningDocsDocsTemplatesOutput';
        $request = $this->v1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest($brand, $family, $model, $firmware, $page_size, $start_key, $status, $template_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApBrandBrandFamilyFamilyModelModelTemplateGet'
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $model model (required)
     * @param  string|null $firmware (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $status (optional)
     * @param  string|null $template_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ApBrandBrandFamilyFamilyModelModelTemplateGetRequest($brand, $family, $model, $firmware = null, $page_size = null, $start_key = null, $status = null, $template_name = null, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateGet'][0])
    {

        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet'
            );
        }

        // verify the required parameter 'family' is set
        if ($family === null || (is_array($family) && count($family) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $family when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling v1ApBrandBrandFamilyFamilyModelModelTemplateGet'
            );
        }







        $resourcePath = '/v1/ap/brand/{brand}/family/{family}/model/{model}/template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $firmware,
            'firmware', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_key,
            'start_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $template_name,
            'template_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($brand !== null) {
            $resourcePath = str_replace(
                '{' . 'brand' . '}',
                ObjectSerializer::toPathValue($brand),
                $resourcePath
            );
        }
        // path params
        if ($family !== null) {
            $resourcePath = str_replace(
                '{' . 'family' . '}',
                ObjectSerializer::toPathValue($family),
                $resourcePath
            );
        }
        // path params
        if ($model !== null) {
            $resourcePath = str_replace(
                '{' . 'model' . '}',
                ObjectSerializer::toPathValue($model),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet
     *
     * Get Template
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $model model (required)
     * @param  string $template template (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProvisioningDocsDocsTemplateOutputSingle|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError
     */
    public function v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet($brand, $family, $model, $template, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet'][0])
    {
        list($response) = $this->v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetWithHttpInfo($brand, $family, $model, $template, $contentType);
        return $response;
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetWithHttpInfo
     *
     * Get Template
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $model model (required)
     * @param  string $template template (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProvisioningDocsDocsTemplateOutputSingle|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetWithHttpInfo($brand, $family, $model, $template, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet'][0])
    {
        $request = $this->v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetRequest($brand, $family, $model, $template, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsTemplateOutputSingle',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ProvisioningDocsDocsTemplateOutputSingle',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsTemplateOutputSingle',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetAsync
     *
     * Get Template
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $model model (required)
     * @param  string $template template (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetAsync($brand, $family, $model, $template, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet'][0])
    {
        return $this->v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetAsyncWithHttpInfo($brand, $family, $model, $template, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetAsyncWithHttpInfo
     *
     * Get Template
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $model model (required)
     * @param  string $template template (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetAsyncWithHttpInfo($brand, $family, $model, $template, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProvisioningDocsDocsTemplateOutputSingle';
        $request = $this->v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetRequest($brand, $family, $model, $template, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet'
     *
     * @param  string $brand brand (required)
     * @param  string $family family (required)
     * @param  string $model model (required)
     * @param  string $template template (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetRequest($brand, $family, $model, $template, string $contentType = self::contentTypes['v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet'][0])
    {

        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet'
            );
        }

        // verify the required parameter 'family' is set
        if ($family === null || (is_array($family) && count($family) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $family when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet'
            );
        }

        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet'
            );
        }

        // verify the required parameter 'template' is set
        if ($template === null || (is_array($template) && count($template) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template when calling v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet'
            );
        }


        $resourcePath = '/v1/ap/brand/{brand}/family/{family}/model/{model}/template/{template}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($brand !== null) {
            $resourcePath = str_replace(
                '{' . 'brand' . '}',
                ObjectSerializer::toPathValue($brand),
                $resourcePath
            );
        }
        // path params
        if ($family !== null) {
            $resourcePath = str_replace(
                '{' . 'family' . '}',
                ObjectSerializer::toPathValue($family),
                $resourcePath
            );
        }
        // path params
        if ($model !== null) {
            $resourcePath = str_replace(
                '{' . 'model' . '}',
                ObjectSerializer::toPathValue($model),
                $resourcePath
            );
        }
        // path params
        if ($template !== null) {
            $resourcePath = str_replace(
                '{' . 'template' . '}',
                ObjectSerializer::toPathValue($template),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApBrandBrandFamilyGet
     *
     * Get Family List
     *
     * @param  string $brand brand (required)
     * @param  string|null $family_name family_name (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  string|null $start_key start_key (optional)
     * @param  string|null $status status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProvisioningDocsDocsFamilyOutput|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError
     */
    public function v1ApBrandBrandFamilyGet($brand, $family_name = null, $page_size = null, $start_key = null, $status = null, string $contentType = self::contentTypes['v1ApBrandBrandFamilyGet'][0])
    {
        list($response) = $this->v1ApBrandBrandFamilyGetWithHttpInfo($brand, $family_name, $page_size, $start_key, $status, $contentType);
        return $response;
    }

    /**
     * Operation v1ApBrandBrandFamilyGetWithHttpInfo
     *
     * Get Family List
     *
     * @param  string $brand brand (required)
     * @param  string|null $family_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProvisioningDocsDocsFamilyOutput|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApBrandBrandFamilyGetWithHttpInfo($brand, $family_name = null, $page_size = null, $start_key = null, $status = null, string $contentType = self::contentTypes['v1ApBrandBrandFamilyGet'][0])
    {
        $request = $this->v1ApBrandBrandFamilyGetRequest($brand, $family_name, $page_size, $start_key, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsFamilyOutput',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ProvisioningDocsDocsFamilyOutput',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsFamilyOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1ApBrandBrandFamilyGetAsync
     *
     * Get Family List
     *
     * @param  string $brand brand (required)
     * @param  string|null $family_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApBrandBrandFamilyGetAsync($brand, $family_name = null, $page_size = null, $start_key = null, $status = null, string $contentType = self::contentTypes['v1ApBrandBrandFamilyGet'][0])
    {
        return $this->v1ApBrandBrandFamilyGetAsyncWithHttpInfo($brand, $family_name, $page_size, $start_key, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApBrandBrandFamilyGetAsyncWithHttpInfo
     *
     * Get Family List
     *
     * @param  string $brand brand (required)
     * @param  string|null $family_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApBrandBrandFamilyGetAsyncWithHttpInfo($brand, $family_name = null, $page_size = null, $start_key = null, $status = null, string $contentType = self::contentTypes['v1ApBrandBrandFamilyGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProvisioningDocsDocsFamilyOutput';
        $request = $this->v1ApBrandBrandFamilyGetRequest($brand, $family_name, $page_size, $start_key, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApBrandBrandFamilyGet'
     *
     * @param  string $brand brand (required)
     * @param  string|null $family_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandFamilyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ApBrandBrandFamilyGetRequest($brand, $family_name = null, $page_size = null, $start_key = null, $status = null, string $contentType = self::contentTypes['v1ApBrandBrandFamilyGet'][0])
    {

        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling v1ApBrandBrandFamilyGet'
            );
        }






        $resourcePath = '/v1/ap/brand/{brand}/family';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $family_name,
            'family_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_key,
            'start_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($brand !== null) {
            $resourcePath = str_replace(
                '{' . 'brand' . '}',
                ObjectSerializer::toPathValue($brand),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApBrandBrandGet
     *
     * Get Brand
     *
     * @param  string $brand brand id to retrieve a brand (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProvisioningDocsDocsBrandOutputSingle|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError
     */
    public function v1ApBrandBrandGet($brand, string $contentType = self::contentTypes['v1ApBrandBrandGet'][0])
    {
        list($response) = $this->v1ApBrandBrandGetWithHttpInfo($brand, $contentType);
        return $response;
    }

    /**
     * Operation v1ApBrandBrandGetWithHttpInfo
     *
     * Get Brand
     *
     * @param  string $brand brand id to retrieve a brand (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProvisioningDocsDocsBrandOutputSingle|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApBrandBrandGetWithHttpInfo($brand, string $contentType = self::contentTypes['v1ApBrandBrandGet'][0])
    {
        $request = $this->v1ApBrandBrandGetRequest($brand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsBrandOutputSingle',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ProvisioningDocsDocsBrandOutputSingle',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsBrandOutputSingle',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1ApBrandBrandGetAsync
     *
     * Get Brand
     *
     * @param  string $brand brand id to retrieve a brand (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApBrandBrandGetAsync($brand, string $contentType = self::contentTypes['v1ApBrandBrandGet'][0])
    {
        return $this->v1ApBrandBrandGetAsyncWithHttpInfo($brand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApBrandBrandGetAsyncWithHttpInfo
     *
     * Get Brand
     *
     * @param  string $brand brand id to retrieve a brand (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApBrandBrandGetAsyncWithHttpInfo($brand, string $contentType = self::contentTypes['v1ApBrandBrandGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProvisioningDocsDocsBrandOutputSingle';
        $request = $this->v1ApBrandBrandGetRequest($brand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApBrandBrandGet'
     *
     * @param  string $brand brand id to retrieve a brand (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandBrandGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ApBrandBrandGetRequest($brand, string $contentType = self::contentTypes['v1ApBrandBrandGet'][0])
    {

        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling v1ApBrandBrandGet'
            );
        }


        $resourcePath = '/v1/ap/brand/{brand}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($brand !== null) {
            $resourcePath = str_replace(
                '{' . 'brand' . '}',
                ObjectSerializer::toPathValue($brand),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApBrandGet
     *
     * Get Brand
     *
     * @param  string|null $brand_name brand_name (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  string|null $start_key start_key (optional)
     * @param  string|null $status status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProvisioningDocsDocsBrandsOutput|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError
     */
    public function v1ApBrandGet($brand_name = null, $page_size = null, $start_key = null, $status = null, string $contentType = self::contentTypes['v1ApBrandGet'][0])
    {
        list($response) = $this->v1ApBrandGetWithHttpInfo($brand_name, $page_size, $start_key, $status, $contentType);
        return $response;
    }

    /**
     * Operation v1ApBrandGetWithHttpInfo
     *
     * Get Brand
     *
     * @param  string|null $brand_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProvisioningDocsDocsBrandsOutput|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApBrandGetWithHttpInfo($brand_name = null, $page_size = null, $start_key = null, $status = null, string $contentType = self::contentTypes['v1ApBrandGet'][0])
    {
        $request = $this->v1ApBrandGetRequest($brand_name, $page_size, $start_key, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsBrandsOutput',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ProvisioningDocsDocsBrandsOutput',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsBrandsOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1ApBrandGetAsync
     *
     * Get Brand
     *
     * @param  string|null $brand_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApBrandGetAsync($brand_name = null, $page_size = null, $start_key = null, $status = null, string $contentType = self::contentTypes['v1ApBrandGet'][0])
    {
        return $this->v1ApBrandGetAsyncWithHttpInfo($brand_name, $page_size, $start_key, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApBrandGetAsyncWithHttpInfo
     *
     * Get Brand
     *
     * @param  string|null $brand_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApBrandGetAsyncWithHttpInfo($brand_name = null, $page_size = null, $start_key = null, $status = null, string $contentType = self::contentTypes['v1ApBrandGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProvisioningDocsDocsBrandsOutput';
        $request = $this->v1ApBrandGetRequest($brand_name, $page_size, $start_key, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApBrandGet'
     *
     * @param  string|null $brand_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApBrandGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ApBrandGetRequest($brand_name = null, $page_size = null, $start_key = null, $status = null, string $contentType = self::contentTypes['v1ApBrandGet'][0])
    {






        $resourcePath = '/v1/ap/brand';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brand_name,
            'brand_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_key,
            'start_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApConfigfileGeneratePost
     *
     * Generate config file
     *
     * @param  \OpenAPI\Client\Model\ModelsGenerateConfigFileRequest $params body params to generate config file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApConfigfileGeneratePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProvisioningDocsDocsConfigFileOutput|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError
     */
    public function v1ApConfigfileGeneratePost($params, string $contentType = self::contentTypes['v1ApConfigfileGeneratePost'][0])
    {
        list($response) = $this->v1ApConfigfileGeneratePostWithHttpInfo($params, $contentType);
        return $response;
    }

    /**
     * Operation v1ApConfigfileGeneratePostWithHttpInfo
     *
     * Generate config file
     *
     * @param  \OpenAPI\Client\Model\ModelsGenerateConfigFileRequest $params body params to generate config file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApConfigfileGeneratePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProvisioningDocsDocsConfigFileOutput|\OpenAPI\Client\Model\ResponseProvisionError|\OpenAPI\Client\Model\ResponseProvisionError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApConfigfileGeneratePostWithHttpInfo($params, string $contentType = self::contentTypes['v1ApConfigfileGeneratePost'][0])
    {
        $request = $this->v1ApConfigfileGeneratePostRequest($params, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsConfigFileOutput',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ProvisioningDocsDocsConfigFileOutput',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProvisioningDocsDocsConfigFileOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResponseProvisionError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1ApConfigfileGeneratePostAsync
     *
     * Generate config file
     *
     * @param  \OpenAPI\Client\Model\ModelsGenerateConfigFileRequest $params body params to generate config file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApConfigfileGeneratePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApConfigfileGeneratePostAsync($params, string $contentType = self::contentTypes['v1ApConfigfileGeneratePost'][0])
    {
        return $this->v1ApConfigfileGeneratePostAsyncWithHttpInfo($params, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApConfigfileGeneratePostAsyncWithHttpInfo
     *
     * Generate config file
     *
     * @param  \OpenAPI\Client\Model\ModelsGenerateConfigFileRequest $params body params to generate config file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApConfigfileGeneratePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApConfigfileGeneratePostAsyncWithHttpInfo($params, string $contentType = self::contentTypes['v1ApConfigfileGeneratePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProvisioningDocsDocsConfigFileOutput';
        $request = $this->v1ApConfigfileGeneratePostRequest($params, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApConfigfileGeneratePost'
     *
     * @param  \OpenAPI\Client\Model\ModelsGenerateConfigFileRequest $params body params to generate config file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ApConfigfileGeneratePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ApConfigfileGeneratePostRequest($params, string $contentType = self::contentTypes['v1ApConfigfileGeneratePost'][0])
    {

        // verify the required parameter 'params' is set
        if ($params === null || (is_array($params) && count($params) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $params when calling v1ApConfigfileGeneratePost'
            );
        }


        $resourcePath = '/v1/ap/configfile/generate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($params)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($params));
            } else {
                $httpBody = $params;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
