<?php
/**
 * DataApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DataApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v1AccountAccountIDCdrCdrIDGet' => [
            'application/json',
        ],
        'v1AccountAccountIDCdrGet' => [
            'application/json',
        ],
        'v1DataCallDailySummaryGet' => [
            'application/json',
        ],
        'v1DataCallDetailGet' => [
            'application/json',
        ],
        'v1DataCallMonthlySummaryGet' => [
            'application/json',
        ],
        'v1DataEndpointListGet' => [
            'application/json',
        ],
        'v1DataEventDailySummaryGet' => [
            'application/json',
        ],
        'v1DataEventDetailGet' => [
            'application/json',
        ],
        'v1DataEventMonthlySummaryGet' => [
            'application/json',
        ],
        'v1DataFeatureDailySummaryGet' => [
            'application/json',
        ],
        'v1DataFeatureMonthlySummaryGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1AccountAccountIDCdrCdrIDGet
     *
     * Get CDR Details
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $cdr_id CDR ID, string (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDCdrCdrIDGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsCdrGetSingle|\OpenAPI\Client\Model\CPAASError
     */
    public function v1AccountAccountIDCdrCdrIDGet($account_id, $cdr_id, string $contentType = self::contentTypes['v1AccountAccountIDCdrCdrIDGet'][0])
    {
        list($response) = $this->v1AccountAccountIDCdrCdrIDGetWithHttpInfo($account_id, $cdr_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AccountAccountIDCdrCdrIDGetWithHttpInfo
     *
     * Get CDR Details
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $cdr_id CDR ID, string (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDCdrCdrIDGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsCdrGetSingle|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AccountAccountIDCdrCdrIDGetWithHttpInfo($account_id, $cdr_id, string $contentType = self::contentTypes['v1AccountAccountIDCdrCdrIDGet'][0])
    {
        $request = $this->v1AccountAccountIDCdrCdrIDGetRequest($account_id, $cdr_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsCdrGetSingle',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsCdrGetSingle',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsCdrGetSingle',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AccountAccountIDCdrCdrIDGetAsync
     *
     * Get CDR Details
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $cdr_id CDR ID, string (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDCdrCdrIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDCdrCdrIDGetAsync($account_id, $cdr_id, string $contentType = self::contentTypes['v1AccountAccountIDCdrCdrIDGet'][0])
    {
        return $this->v1AccountAccountIDCdrCdrIDGetAsyncWithHttpInfo($account_id, $cdr_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AccountAccountIDCdrCdrIDGetAsyncWithHttpInfo
     *
     * Get CDR Details
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $cdr_id CDR ID, string (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDCdrCdrIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDCdrCdrIDGetAsyncWithHttpInfo($account_id, $cdr_id, string $contentType = self::contentTypes['v1AccountAccountIDCdrCdrIDGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsCdrGetSingle';
        $request = $this->v1AccountAccountIDCdrCdrIDGetRequest($account_id, $cdr_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AccountAccountIDCdrCdrIDGet'
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string $cdr_id CDR ID, string (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDCdrCdrIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AccountAccountIDCdrCdrIDGetRequest($account_id, $cdr_id, string $contentType = self::contentTypes['v1AccountAccountIDCdrCdrIDGet'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling v1AccountAccountIDCdrCdrIDGet'
            );
        }

        // verify the required parameter 'cdr_id' is set
        if ($cdr_id === null || (is_array($cdr_id) && count($cdr_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cdr_id when calling v1AccountAccountIDCdrCdrIDGet'
            );
        }


        $resourcePath = '/v1/account/{accountID}/cdr/{cdrID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($cdr_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cdrID' . '}',
                ObjectSerializer::toPathValue($cdr_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AccountAccountIDCdrGet
     *
     * Get CDR List
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string|null $page_size Page size (Maximum number of results to display per page) (optional)
     * @param  string|null $start_key Start key (Starting offset for displaying results) (optional)
     * @param  string|null $created_from For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @param  string|null $created_to For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDCdrGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsCdrGetAll|\OpenAPI\Client\Model\CPAASError
     */
    public function v1AccountAccountIDCdrGet($account_id, $page_size = null, $start_key = null, $created_from = null, $created_to = null, string $contentType = self::contentTypes['v1AccountAccountIDCdrGet'][0])
    {
        list($response) = $this->v1AccountAccountIDCdrGetWithHttpInfo($account_id, $page_size, $start_key, $created_from, $created_to, $contentType);
        return $response;
    }

    /**
     * Operation v1AccountAccountIDCdrGetWithHttpInfo
     *
     * Get CDR List
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string|null $page_size Page size (Maximum number of results to display per page) (optional)
     * @param  string|null $start_key Start key (Starting offset for displaying results) (optional)
     * @param  string|null $created_from For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @param  string|null $created_to For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDCdrGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsCdrGetAll|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AccountAccountIDCdrGetWithHttpInfo($account_id, $page_size = null, $start_key = null, $created_from = null, $created_to = null, string $contentType = self::contentTypes['v1AccountAccountIDCdrGet'][0])
    {
        $request = $this->v1AccountAccountIDCdrGetRequest($account_id, $page_size, $start_key, $created_from, $created_to, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsCdrGetAll',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsCdrGetAll',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsCdrGetAll',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AccountAccountIDCdrGetAsync
     *
     * Get CDR List
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string|null $page_size Page size (Maximum number of results to display per page) (optional)
     * @param  string|null $start_key Start key (Starting offset for displaying results) (optional)
     * @param  string|null $created_from For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @param  string|null $created_to For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDCdrGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDCdrGetAsync($account_id, $page_size = null, $start_key = null, $created_from = null, $created_to = null, string $contentType = self::contentTypes['v1AccountAccountIDCdrGet'][0])
    {
        return $this->v1AccountAccountIDCdrGetAsyncWithHttpInfo($account_id, $page_size, $start_key, $created_from, $created_to, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AccountAccountIDCdrGetAsyncWithHttpInfo
     *
     * Get CDR List
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string|null $page_size Page size (Maximum number of results to display per page) (optional)
     * @param  string|null $start_key Start key (Starting offset for displaying results) (optional)
     * @param  string|null $created_from For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @param  string|null $created_to For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDCdrGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountAccountIDCdrGetAsyncWithHttpInfo($account_id, $page_size = null, $start_key = null, $created_from = null, $created_to = null, string $contentType = self::contentTypes['v1AccountAccountIDCdrGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsCdrGetAll';
        $request = $this->v1AccountAccountIDCdrGetRequest($account_id, $page_size, $start_key, $created_from, $created_to, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AccountAccountIDCdrGet'
     *
     * @param  string $account_id Account ID, 32 alpha numeric (required)
     * @param  string|null $page_size Page size (Maximum number of results to display per page) (optional)
     * @param  string|null $start_key Start key (Starting offset for displaying results) (optional)
     * @param  string|null $created_from For displaying records which are created on or after this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @param  string|null $created_to For displaying records which are created on or before this timestamp (Supported timestamp formats: iso 8601, unix time in seconds or milliseconds or microseconds or nanoseconds) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AccountAccountIDCdrGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AccountAccountIDCdrGetRequest($account_id, $page_size = null, $start_key = null, $created_from = null, $created_to = null, string $contentType = self::contentTypes['v1AccountAccountIDCdrGet'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling v1AccountAccountIDCdrGet'
            );
        }






        $resourcePath = '/v1/account/{accountID}/cdr';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_key,
            'start_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_from,
            'created_from', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_to,
            'created_to', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountID' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DataCallDailySummaryGet
     *
     * Get Call Daily Summary List
     *
     * @param  string|null $account_id account_id (optional)
     * @param  string|null $call_type call_type (optional)
     * @param  string|null $end_date end_date (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  string|null $start_date start_date (optional)
     * @param  string|null $start_key start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataCallDailySummaryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsCallDailySummary|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError
     */
    public function v1DataCallDailySummaryGet($account_id = null, $call_type = null, $end_date = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataCallDailySummaryGet'][0])
    {
        list($response) = $this->v1DataCallDailySummaryGetWithHttpInfo($account_id, $call_type, $end_date, $page_size, $start_date, $start_key, $contentType);
        return $response;
    }

    /**
     * Operation v1DataCallDailySummaryGetWithHttpInfo
     *
     * Get Call Daily Summary List
     *
     * @param  string|null $account_id (optional)
     * @param  string|null $call_type (optional)
     * @param  string|null $end_date (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataCallDailySummaryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsCallDailySummary|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DataCallDailySummaryGetWithHttpInfo($account_id = null, $call_type = null, $end_date = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataCallDailySummaryGet'][0])
    {
        $request = $this->v1DataCallDailySummaryGetRequest($account_id, $call_type, $end_date, $page_size, $start_date, $start_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsCallDailySummary',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsCallDailySummary',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsCallDailySummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1DataCallDailySummaryGetAsync
     *
     * Get Call Daily Summary List
     *
     * @param  string|null $account_id (optional)
     * @param  string|null $call_type (optional)
     * @param  string|null $end_date (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataCallDailySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataCallDailySummaryGetAsync($account_id = null, $call_type = null, $end_date = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataCallDailySummaryGet'][0])
    {
        return $this->v1DataCallDailySummaryGetAsyncWithHttpInfo($account_id, $call_type, $end_date, $page_size, $start_date, $start_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DataCallDailySummaryGetAsyncWithHttpInfo
     *
     * Get Call Daily Summary List
     *
     * @param  string|null $account_id (optional)
     * @param  string|null $call_type (optional)
     * @param  string|null $end_date (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataCallDailySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataCallDailySummaryGetAsyncWithHttpInfo($account_id = null, $call_type = null, $end_date = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataCallDailySummaryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsCallDailySummary';
        $request = $this->v1DataCallDailySummaryGetRequest($account_id, $call_type, $end_date, $page_size, $start_date, $start_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DataCallDailySummaryGet'
     *
     * @param  string|null $account_id (optional)
     * @param  string|null $call_type (optional)
     * @param  string|null $end_date (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataCallDailySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DataCallDailySummaryGetRequest($account_id = null, $call_type = null, $end_date = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataCallDailySummaryGet'][0])
    {








        $resourcePath = '/v1/data/call_daily_summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'account_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $call_type,
            'call_type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'end_date', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start_date', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_key,
            'start_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DataCallDetailGet
     *
     * Get Call Detail List
     *
     * @param  string|null $account account (optional)
     * @param  string|null $call_type call_type (optional)
     * @param  string|null $callee_name callee_name (optional)
     * @param  string|null $callee_number callee_number (optional)
     * @param  string|null $caller_name caller_name (optional)
     * @param  string|null $caller_number caller_number (optional)
     * @param  string|null $end_date end_date (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  string|null $start_date start_date (optional)
     * @param  string|null $start_key start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataCallDetailGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsCallDetail|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError
     */
    public function v1DataCallDetailGet($account = null, $call_type = null, $callee_name = null, $callee_number = null, $caller_name = null, $caller_number = null, $end_date = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataCallDetailGet'][0])
    {
        list($response) = $this->v1DataCallDetailGetWithHttpInfo($account, $call_type, $callee_name, $callee_number, $caller_name, $caller_number, $end_date, $page_size, $start_date, $start_key, $contentType);
        return $response;
    }

    /**
     * Operation v1DataCallDetailGetWithHttpInfo
     *
     * Get Call Detail List
     *
     * @param  string|null $account (optional)
     * @param  string|null $call_type (optional)
     * @param  string|null $callee_name (optional)
     * @param  string|null $callee_number (optional)
     * @param  string|null $caller_name (optional)
     * @param  string|null $caller_number (optional)
     * @param  string|null $end_date (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataCallDetailGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsCallDetail|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DataCallDetailGetWithHttpInfo($account = null, $call_type = null, $callee_name = null, $callee_number = null, $caller_name = null, $caller_number = null, $end_date = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataCallDetailGet'][0])
    {
        $request = $this->v1DataCallDetailGetRequest($account, $call_type, $callee_name, $callee_number, $caller_name, $caller_number, $end_date, $page_size, $start_date, $start_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsCallDetail',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsCallDetail',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsCallDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1DataCallDetailGetAsync
     *
     * Get Call Detail List
     *
     * @param  string|null $account (optional)
     * @param  string|null $call_type (optional)
     * @param  string|null $callee_name (optional)
     * @param  string|null $callee_number (optional)
     * @param  string|null $caller_name (optional)
     * @param  string|null $caller_number (optional)
     * @param  string|null $end_date (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataCallDetailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataCallDetailGetAsync($account = null, $call_type = null, $callee_name = null, $callee_number = null, $caller_name = null, $caller_number = null, $end_date = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataCallDetailGet'][0])
    {
        return $this->v1DataCallDetailGetAsyncWithHttpInfo($account, $call_type, $callee_name, $callee_number, $caller_name, $caller_number, $end_date, $page_size, $start_date, $start_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DataCallDetailGetAsyncWithHttpInfo
     *
     * Get Call Detail List
     *
     * @param  string|null $account (optional)
     * @param  string|null $call_type (optional)
     * @param  string|null $callee_name (optional)
     * @param  string|null $callee_number (optional)
     * @param  string|null $caller_name (optional)
     * @param  string|null $caller_number (optional)
     * @param  string|null $end_date (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataCallDetailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataCallDetailGetAsyncWithHttpInfo($account = null, $call_type = null, $callee_name = null, $callee_number = null, $caller_name = null, $caller_number = null, $end_date = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataCallDetailGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsCallDetail';
        $request = $this->v1DataCallDetailGetRequest($account, $call_type, $callee_name, $callee_number, $caller_name, $caller_number, $end_date, $page_size, $start_date, $start_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DataCallDetailGet'
     *
     * @param  string|null $account (optional)
     * @param  string|null $call_type (optional)
     * @param  string|null $callee_name (optional)
     * @param  string|null $callee_number (optional)
     * @param  string|null $caller_name (optional)
     * @param  string|null $caller_number (optional)
     * @param  string|null $end_date (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataCallDetailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DataCallDetailGetRequest($account = null, $call_type = null, $callee_name = null, $callee_number = null, $caller_name = null, $caller_number = null, $end_date = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataCallDetailGet'][0])
    {












        $resourcePath = '/v1/data/call_detail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account,
            'account', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $call_type,
            'call_type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $callee_name,
            'callee_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $callee_number,
            'callee_number', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $caller_name,
            'caller_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $caller_number,
            'caller_number', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'end_date', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start_date', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_key,
            'start_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DataCallMonthlySummaryGet
     *
     * Get Call Detail List
     *
     * @param  string|null $account account (optional)
     * @param  string|null $call_type call_type (optional)
     * @param  int|null $end_month end_month (optional)
     * @param  int|null $end_year end_year (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  string|null $start_key start_key (optional)
     * @param  int|null $start_month start_month (optional)
     * @param  int|null $start_year start_year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataCallMonthlySummaryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsCallMonthlySummary|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError
     */
    public function v1DataCallMonthlySummaryGet($account = null, $call_type = null, $end_month = null, $end_year = null, $page_size = null, $start_key = null, $start_month = null, $start_year = null, string $contentType = self::contentTypes['v1DataCallMonthlySummaryGet'][0])
    {
        list($response) = $this->v1DataCallMonthlySummaryGetWithHttpInfo($account, $call_type, $end_month, $end_year, $page_size, $start_key, $start_month, $start_year, $contentType);
        return $response;
    }

    /**
     * Operation v1DataCallMonthlySummaryGetWithHttpInfo
     *
     * Get Call Detail List
     *
     * @param  string|null $account (optional)
     * @param  string|null $call_type (optional)
     * @param  int|null $end_month (optional)
     * @param  int|null $end_year (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  int|null $start_month (optional)
     * @param  int|null $start_year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataCallMonthlySummaryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsCallMonthlySummary|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DataCallMonthlySummaryGetWithHttpInfo($account = null, $call_type = null, $end_month = null, $end_year = null, $page_size = null, $start_key = null, $start_month = null, $start_year = null, string $contentType = self::contentTypes['v1DataCallMonthlySummaryGet'][0])
    {
        $request = $this->v1DataCallMonthlySummaryGetRequest($account, $call_type, $end_month, $end_year, $page_size, $start_key, $start_month, $start_year, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsCallMonthlySummary',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsCallMonthlySummary',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsCallMonthlySummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1DataCallMonthlySummaryGetAsync
     *
     * Get Call Detail List
     *
     * @param  string|null $account (optional)
     * @param  string|null $call_type (optional)
     * @param  int|null $end_month (optional)
     * @param  int|null $end_year (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  int|null $start_month (optional)
     * @param  int|null $start_year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataCallMonthlySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataCallMonthlySummaryGetAsync($account = null, $call_type = null, $end_month = null, $end_year = null, $page_size = null, $start_key = null, $start_month = null, $start_year = null, string $contentType = self::contentTypes['v1DataCallMonthlySummaryGet'][0])
    {
        return $this->v1DataCallMonthlySummaryGetAsyncWithHttpInfo($account, $call_type, $end_month, $end_year, $page_size, $start_key, $start_month, $start_year, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DataCallMonthlySummaryGetAsyncWithHttpInfo
     *
     * Get Call Detail List
     *
     * @param  string|null $account (optional)
     * @param  string|null $call_type (optional)
     * @param  int|null $end_month (optional)
     * @param  int|null $end_year (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  int|null $start_month (optional)
     * @param  int|null $start_year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataCallMonthlySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataCallMonthlySummaryGetAsyncWithHttpInfo($account = null, $call_type = null, $end_month = null, $end_year = null, $page_size = null, $start_key = null, $start_month = null, $start_year = null, string $contentType = self::contentTypes['v1DataCallMonthlySummaryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsCallMonthlySummary';
        $request = $this->v1DataCallMonthlySummaryGetRequest($account, $call_type, $end_month, $end_year, $page_size, $start_key, $start_month, $start_year, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DataCallMonthlySummaryGet'
     *
     * @param  string|null $account (optional)
     * @param  string|null $call_type (optional)
     * @param  int|null $end_month (optional)
     * @param  int|null $end_year (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  int|null $start_month (optional)
     * @param  int|null $start_year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataCallMonthlySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DataCallMonthlySummaryGetRequest($account = null, $call_type = null, $end_month = null, $end_year = null, $page_size = null, $start_key = null, $start_month = null, $start_year = null, string $contentType = self::contentTypes['v1DataCallMonthlySummaryGet'][0])
    {










        $resourcePath = '/v1/data/call_monthly_summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account,
            'account', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $call_type,
            'call_type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_month,
            'end_month', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_year,
            'end_year', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_key,
            'start_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_month,
            'start_month', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_year,
            'start_year', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DataEndpointListGet
     *
     * Get Endpoint List
     *
     * @param  string|null $endpoint_name endpoint_name (optional)
     * @param  string|null $feature_name feature_name (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  string|null $start_key start_key (optional)
     * @param  string|null $transaction_type transaction_type (optional)
     * @param  string|null $version version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEndpointListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsEndpointList|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError
     */
    public function v1DataEndpointListGet($endpoint_name = null, $feature_name = null, $page_size = null, $start_key = null, $transaction_type = null, $version = null, string $contentType = self::contentTypes['v1DataEndpointListGet'][0])
    {
        list($response) = $this->v1DataEndpointListGetWithHttpInfo($endpoint_name, $feature_name, $page_size, $start_key, $transaction_type, $version, $contentType);
        return $response;
    }

    /**
     * Operation v1DataEndpointListGetWithHttpInfo
     *
     * Get Endpoint List
     *
     * @param  string|null $endpoint_name (optional)
     * @param  string|null $feature_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $transaction_type (optional)
     * @param  string|null $version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEndpointListGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsEndpointList|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DataEndpointListGetWithHttpInfo($endpoint_name = null, $feature_name = null, $page_size = null, $start_key = null, $transaction_type = null, $version = null, string $contentType = self::contentTypes['v1DataEndpointListGet'][0])
    {
        $request = $this->v1DataEndpointListGetRequest($endpoint_name, $feature_name, $page_size, $start_key, $transaction_type, $version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsEndpointList',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsEndpointList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsEndpointList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1DataEndpointListGetAsync
     *
     * Get Endpoint List
     *
     * @param  string|null $endpoint_name (optional)
     * @param  string|null $feature_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $transaction_type (optional)
     * @param  string|null $version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEndpointListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataEndpointListGetAsync($endpoint_name = null, $feature_name = null, $page_size = null, $start_key = null, $transaction_type = null, $version = null, string $contentType = self::contentTypes['v1DataEndpointListGet'][0])
    {
        return $this->v1DataEndpointListGetAsyncWithHttpInfo($endpoint_name, $feature_name, $page_size, $start_key, $transaction_type, $version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DataEndpointListGetAsyncWithHttpInfo
     *
     * Get Endpoint List
     *
     * @param  string|null $endpoint_name (optional)
     * @param  string|null $feature_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $transaction_type (optional)
     * @param  string|null $version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEndpointListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataEndpointListGetAsyncWithHttpInfo($endpoint_name = null, $feature_name = null, $page_size = null, $start_key = null, $transaction_type = null, $version = null, string $contentType = self::contentTypes['v1DataEndpointListGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsEndpointList';
        $request = $this->v1DataEndpointListGetRequest($endpoint_name, $feature_name, $page_size, $start_key, $transaction_type, $version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DataEndpointListGet'
     *
     * @param  string|null $endpoint_name (optional)
     * @param  string|null $feature_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $transaction_type (optional)
     * @param  string|null $version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEndpointListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DataEndpointListGetRequest($endpoint_name = null, $feature_name = null, $page_size = null, $start_key = null, $transaction_type = null, $version = null, string $contentType = self::contentTypes['v1DataEndpointListGet'][0])
    {








        $resourcePath = '/v1/data/endpoint_list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endpoint_name,
            'endpoint_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $feature_name,
            'feature_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_key,
            'start_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_type,
            'transaction_type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $version,
            'version', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DataEventDailySummaryGet
     *
     * Get Event Daily Summary List
     *
     * @param  string|null $account_id account_id (optional)
     * @param  string|null $component component (optional)
     * @param  string|null $end_date end_date (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  string|null $start_date start_date (optional)
     * @param  string|null $start_key start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEventDailySummaryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsEventDailySummary|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError
     */
    public function v1DataEventDailySummaryGet($account_id = null, $component = null, $end_date = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataEventDailySummaryGet'][0])
    {
        list($response) = $this->v1DataEventDailySummaryGetWithHttpInfo($account_id, $component, $end_date, $page_size, $start_date, $start_key, $contentType);
        return $response;
    }

    /**
     * Operation v1DataEventDailySummaryGetWithHttpInfo
     *
     * Get Event Daily Summary List
     *
     * @param  string|null $account_id (optional)
     * @param  string|null $component (optional)
     * @param  string|null $end_date (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEventDailySummaryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsEventDailySummary|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DataEventDailySummaryGetWithHttpInfo($account_id = null, $component = null, $end_date = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataEventDailySummaryGet'][0])
    {
        $request = $this->v1DataEventDailySummaryGetRequest($account_id, $component, $end_date, $page_size, $start_date, $start_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsEventDailySummary',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsEventDailySummary',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsEventDailySummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1DataEventDailySummaryGetAsync
     *
     * Get Event Daily Summary List
     *
     * @param  string|null $account_id (optional)
     * @param  string|null $component (optional)
     * @param  string|null $end_date (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEventDailySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataEventDailySummaryGetAsync($account_id = null, $component = null, $end_date = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataEventDailySummaryGet'][0])
    {
        return $this->v1DataEventDailySummaryGetAsyncWithHttpInfo($account_id, $component, $end_date, $page_size, $start_date, $start_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DataEventDailySummaryGetAsyncWithHttpInfo
     *
     * Get Event Daily Summary List
     *
     * @param  string|null $account_id (optional)
     * @param  string|null $component (optional)
     * @param  string|null $end_date (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEventDailySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataEventDailySummaryGetAsyncWithHttpInfo($account_id = null, $component = null, $end_date = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataEventDailySummaryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsEventDailySummary';
        $request = $this->v1DataEventDailySummaryGetRequest($account_id, $component, $end_date, $page_size, $start_date, $start_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DataEventDailySummaryGet'
     *
     * @param  string|null $account_id (optional)
     * @param  string|null $component (optional)
     * @param  string|null $end_date (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEventDailySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DataEventDailySummaryGetRequest($account_id = null, $component = null, $end_date = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataEventDailySummaryGet'][0])
    {








        $resourcePath = '/v1/data/event_daily_summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'account_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $component,
            'component', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'end_date', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start_date', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_key,
            'start_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DataEventDetailGet
     *
     * Get Event Details
     *
     * @param  string|null $account_id account_id (optional)
     * @param  string|null $component component (optional)
     * @param  string|null $end_date_time end_date_time (optional)
     * @param  string|null $event_name event_name (optional)
     * @param  string|null $exec_status exec_status (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  string|null $start_date_time start_date_time (optional)
     * @param  string|null $start_key start_key (optional)
     * @param  string|null $username username (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEventDetailGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsEventDetail|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError
     */
    public function v1DataEventDetailGet($account_id = null, $component = null, $end_date_time = null, $event_name = null, $exec_status = null, $page_size = null, $start_date_time = null, $start_key = null, $username = null, string $contentType = self::contentTypes['v1DataEventDetailGet'][0])
    {
        list($response) = $this->v1DataEventDetailGetWithHttpInfo($account_id, $component, $end_date_time, $event_name, $exec_status, $page_size, $start_date_time, $start_key, $username, $contentType);
        return $response;
    }

    /**
     * Operation v1DataEventDetailGetWithHttpInfo
     *
     * Get Event Details
     *
     * @param  string|null $account_id (optional)
     * @param  string|null $component (optional)
     * @param  string|null $end_date_time (optional)
     * @param  string|null $event_name (optional)
     * @param  string|null $exec_status (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date_time (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $username (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEventDetailGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsEventDetail|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DataEventDetailGetWithHttpInfo($account_id = null, $component = null, $end_date_time = null, $event_name = null, $exec_status = null, $page_size = null, $start_date_time = null, $start_key = null, $username = null, string $contentType = self::contentTypes['v1DataEventDetailGet'][0])
    {
        $request = $this->v1DataEventDetailGetRequest($account_id, $component, $end_date_time, $event_name, $exec_status, $page_size, $start_date_time, $start_key, $username, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsEventDetail',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsEventDetail',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsEventDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1DataEventDetailGetAsync
     *
     * Get Event Details
     *
     * @param  string|null $account_id (optional)
     * @param  string|null $component (optional)
     * @param  string|null $end_date_time (optional)
     * @param  string|null $event_name (optional)
     * @param  string|null $exec_status (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date_time (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $username (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEventDetailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataEventDetailGetAsync($account_id = null, $component = null, $end_date_time = null, $event_name = null, $exec_status = null, $page_size = null, $start_date_time = null, $start_key = null, $username = null, string $contentType = self::contentTypes['v1DataEventDetailGet'][0])
    {
        return $this->v1DataEventDetailGetAsyncWithHttpInfo($account_id, $component, $end_date_time, $event_name, $exec_status, $page_size, $start_date_time, $start_key, $username, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DataEventDetailGetAsyncWithHttpInfo
     *
     * Get Event Details
     *
     * @param  string|null $account_id (optional)
     * @param  string|null $component (optional)
     * @param  string|null $end_date_time (optional)
     * @param  string|null $event_name (optional)
     * @param  string|null $exec_status (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date_time (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $username (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEventDetailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataEventDetailGetAsyncWithHttpInfo($account_id = null, $component = null, $end_date_time = null, $event_name = null, $exec_status = null, $page_size = null, $start_date_time = null, $start_key = null, $username = null, string $contentType = self::contentTypes['v1DataEventDetailGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsEventDetail';
        $request = $this->v1DataEventDetailGetRequest($account_id, $component, $end_date_time, $event_name, $exec_status, $page_size, $start_date_time, $start_key, $username, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DataEventDetailGet'
     *
     * @param  string|null $account_id (optional)
     * @param  string|null $component (optional)
     * @param  string|null $end_date_time (optional)
     * @param  string|null $event_name (optional)
     * @param  string|null $exec_status (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date_time (optional)
     * @param  string|null $start_key (optional)
     * @param  string|null $username (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEventDetailGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DataEventDetailGetRequest($account_id = null, $component = null, $end_date_time = null, $event_name = null, $exec_status = null, $page_size = null, $start_date_time = null, $start_key = null, $username = null, string $contentType = self::contentTypes['v1DataEventDetailGet'][0])
    {











        $resourcePath = '/v1/data/event_detail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'account_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $component,
            'component', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date_time,
            'end_date_time', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event_name,
            'event_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exec_status,
            'exec_status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date_time,
            'start_date_time', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_key,
            'start_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $username,
            'username', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DataEventMonthlySummaryGet
     *
     * Get Event Monthly Summary List
     *
     * @param  string|null $account_id account_id (optional)
     * @param  string|null $component component (optional)
     * @param  int|null $end_month end_month (optional)
     * @param  int|null $end_year end_year (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  string|null $start_key start_key (optional)
     * @param  int|null $start_month start_month (optional)
     * @param  int|null $start_year start_year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEventMonthlySummaryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsEventMonthlySummary|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError
     */
    public function v1DataEventMonthlySummaryGet($account_id = null, $component = null, $end_month = null, $end_year = null, $page_size = null, $start_key = null, $start_month = null, $start_year = null, string $contentType = self::contentTypes['v1DataEventMonthlySummaryGet'][0])
    {
        list($response) = $this->v1DataEventMonthlySummaryGetWithHttpInfo($account_id, $component, $end_month, $end_year, $page_size, $start_key, $start_month, $start_year, $contentType);
        return $response;
    }

    /**
     * Operation v1DataEventMonthlySummaryGetWithHttpInfo
     *
     * Get Event Monthly Summary List
     *
     * @param  string|null $account_id (optional)
     * @param  string|null $component (optional)
     * @param  int|null $end_month (optional)
     * @param  int|null $end_year (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  int|null $start_month (optional)
     * @param  int|null $start_year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEventMonthlySummaryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsEventMonthlySummary|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DataEventMonthlySummaryGetWithHttpInfo($account_id = null, $component = null, $end_month = null, $end_year = null, $page_size = null, $start_key = null, $start_month = null, $start_year = null, string $contentType = self::contentTypes['v1DataEventMonthlySummaryGet'][0])
    {
        $request = $this->v1DataEventMonthlySummaryGetRequest($account_id, $component, $end_month, $end_year, $page_size, $start_key, $start_month, $start_year, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsEventMonthlySummary',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsEventMonthlySummary',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsEventMonthlySummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1DataEventMonthlySummaryGetAsync
     *
     * Get Event Monthly Summary List
     *
     * @param  string|null $account_id (optional)
     * @param  string|null $component (optional)
     * @param  int|null $end_month (optional)
     * @param  int|null $end_year (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  int|null $start_month (optional)
     * @param  int|null $start_year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEventMonthlySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataEventMonthlySummaryGetAsync($account_id = null, $component = null, $end_month = null, $end_year = null, $page_size = null, $start_key = null, $start_month = null, $start_year = null, string $contentType = self::contentTypes['v1DataEventMonthlySummaryGet'][0])
    {
        return $this->v1DataEventMonthlySummaryGetAsyncWithHttpInfo($account_id, $component, $end_month, $end_year, $page_size, $start_key, $start_month, $start_year, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DataEventMonthlySummaryGetAsyncWithHttpInfo
     *
     * Get Event Monthly Summary List
     *
     * @param  string|null $account_id (optional)
     * @param  string|null $component (optional)
     * @param  int|null $end_month (optional)
     * @param  int|null $end_year (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  int|null $start_month (optional)
     * @param  int|null $start_year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEventMonthlySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataEventMonthlySummaryGetAsyncWithHttpInfo($account_id = null, $component = null, $end_month = null, $end_year = null, $page_size = null, $start_key = null, $start_month = null, $start_year = null, string $contentType = self::contentTypes['v1DataEventMonthlySummaryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsEventMonthlySummary';
        $request = $this->v1DataEventMonthlySummaryGetRequest($account_id, $component, $end_month, $end_year, $page_size, $start_key, $start_month, $start_year, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DataEventMonthlySummaryGet'
     *
     * @param  string|null $account_id (optional)
     * @param  string|null $component (optional)
     * @param  int|null $end_month (optional)
     * @param  int|null $end_year (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  int|null $start_month (optional)
     * @param  int|null $start_year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataEventMonthlySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DataEventMonthlySummaryGetRequest($account_id = null, $component = null, $end_month = null, $end_year = null, $page_size = null, $start_key = null, $start_month = null, $start_year = null, string $contentType = self::contentTypes['v1DataEventMonthlySummaryGet'][0])
    {










        $resourcePath = '/v1/data/event_monthly_summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'account_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $component,
            'component', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_month,
            'end_month', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_year,
            'end_year', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_key,
            'start_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_month,
            'start_month', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_year,
            'start_year', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DataFeatureDailySummaryGet
     *
     * Get Feature Daily Summary List
     *
     * @param  string|null $end_date end_date (optional)
     * @param  string|null $feature_name feature_name (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  string|null $start_date start_date (optional)
     * @param  string|null $start_key start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataFeatureDailySummaryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsFeatureDailySummary|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError
     */
    public function v1DataFeatureDailySummaryGet($end_date = null, $feature_name = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataFeatureDailySummaryGet'][0])
    {
        list($response) = $this->v1DataFeatureDailySummaryGetWithHttpInfo($end_date, $feature_name, $page_size, $start_date, $start_key, $contentType);
        return $response;
    }

    /**
     * Operation v1DataFeatureDailySummaryGetWithHttpInfo
     *
     * Get Feature Daily Summary List
     *
     * @param  string|null $end_date (optional)
     * @param  string|null $feature_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataFeatureDailySummaryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsFeatureDailySummary|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DataFeatureDailySummaryGetWithHttpInfo($end_date = null, $feature_name = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataFeatureDailySummaryGet'][0])
    {
        $request = $this->v1DataFeatureDailySummaryGetRequest($end_date, $feature_name, $page_size, $start_date, $start_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsFeatureDailySummary',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsFeatureDailySummary',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsFeatureDailySummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1DataFeatureDailySummaryGetAsync
     *
     * Get Feature Daily Summary List
     *
     * @param  string|null $end_date (optional)
     * @param  string|null $feature_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataFeatureDailySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataFeatureDailySummaryGetAsync($end_date = null, $feature_name = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataFeatureDailySummaryGet'][0])
    {
        return $this->v1DataFeatureDailySummaryGetAsyncWithHttpInfo($end_date, $feature_name, $page_size, $start_date, $start_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DataFeatureDailySummaryGetAsyncWithHttpInfo
     *
     * Get Feature Daily Summary List
     *
     * @param  string|null $end_date (optional)
     * @param  string|null $feature_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataFeatureDailySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataFeatureDailySummaryGetAsyncWithHttpInfo($end_date = null, $feature_name = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataFeatureDailySummaryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsFeatureDailySummary';
        $request = $this->v1DataFeatureDailySummaryGetRequest($end_date, $feature_name, $page_size, $start_date, $start_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DataFeatureDailySummaryGet'
     *
     * @param  string|null $end_date (optional)
     * @param  string|null $feature_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $start_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataFeatureDailySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DataFeatureDailySummaryGetRequest($end_date = null, $feature_name = null, $page_size = null, $start_date = null, $start_key = null, string $contentType = self::contentTypes['v1DataFeatureDailySummaryGet'][0])
    {







        $resourcePath = '/v1/data/feature_daily_summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'end_date', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $feature_name,
            'feature_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start_date', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_key,
            'start_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DataFeatureMonthlySummaryGet
     *
     * Get Feature Monthly Summary List
     *
     * @param  int|null $end_month end_month (optional)
     * @param  int|null $end_year end_year (optional)
     * @param  string|null $feature_name feature_name (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  string|null $start_key start_key (optional)
     * @param  int|null $start_month start_month (optional)
     * @param  int|null $start_year start_year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataFeatureMonthlySummaryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ServiceDocsFeatureMonthlySummary|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError
     */
    public function v1DataFeatureMonthlySummaryGet($end_month = null, $end_year = null, $feature_name = null, $page_size = null, $start_key = null, $start_month = null, $start_year = null, string $contentType = self::contentTypes['v1DataFeatureMonthlySummaryGet'][0])
    {
        list($response) = $this->v1DataFeatureMonthlySummaryGetWithHttpInfo($end_month, $end_year, $feature_name, $page_size, $start_key, $start_month, $start_year, $contentType);
        return $response;
    }

    /**
     * Operation v1DataFeatureMonthlySummaryGetWithHttpInfo
     *
     * Get Feature Monthly Summary List
     *
     * @param  int|null $end_month (optional)
     * @param  int|null $end_year (optional)
     * @param  string|null $feature_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  int|null $start_month (optional)
     * @param  int|null $start_year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataFeatureMonthlySummaryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ServiceDocsFeatureMonthlySummary|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError|\OpenAPI\Client\Model\CPAASError, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DataFeatureMonthlySummaryGetWithHttpInfo($end_month = null, $end_year = null, $feature_name = null, $page_size = null, $start_key = null, $start_month = null, $start_year = null, string $contentType = self::contentTypes['v1DataFeatureMonthlySummaryGet'][0])
    {
        $request = $this->v1DataFeatureMonthlySummaryGetRequest($end_month, $end_year, $feature_name, $page_size, $start_key, $start_month, $start_year, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ServiceDocsFeatureMonthlySummary',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CPAASError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ServiceDocsFeatureMonthlySummary',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ServiceDocsFeatureMonthlySummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CPAASError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1DataFeatureMonthlySummaryGetAsync
     *
     * Get Feature Monthly Summary List
     *
     * @param  int|null $end_month (optional)
     * @param  int|null $end_year (optional)
     * @param  string|null $feature_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  int|null $start_month (optional)
     * @param  int|null $start_year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataFeatureMonthlySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataFeatureMonthlySummaryGetAsync($end_month = null, $end_year = null, $feature_name = null, $page_size = null, $start_key = null, $start_month = null, $start_year = null, string $contentType = self::contentTypes['v1DataFeatureMonthlySummaryGet'][0])
    {
        return $this->v1DataFeatureMonthlySummaryGetAsyncWithHttpInfo($end_month, $end_year, $feature_name, $page_size, $start_key, $start_month, $start_year, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DataFeatureMonthlySummaryGetAsyncWithHttpInfo
     *
     * Get Feature Monthly Summary List
     *
     * @param  int|null $end_month (optional)
     * @param  int|null $end_year (optional)
     * @param  string|null $feature_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  int|null $start_month (optional)
     * @param  int|null $start_year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataFeatureMonthlySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DataFeatureMonthlySummaryGetAsyncWithHttpInfo($end_month = null, $end_year = null, $feature_name = null, $page_size = null, $start_key = null, $start_month = null, $start_year = null, string $contentType = self::contentTypes['v1DataFeatureMonthlySummaryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ServiceDocsFeatureMonthlySummary';
        $request = $this->v1DataFeatureMonthlySummaryGetRequest($end_month, $end_year, $feature_name, $page_size, $start_key, $start_month, $start_year, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DataFeatureMonthlySummaryGet'
     *
     * @param  int|null $end_month (optional)
     * @param  int|null $end_year (optional)
     * @param  string|null $feature_name (optional)
     * @param  int|null $page_size (optional)
     * @param  string|null $start_key (optional)
     * @param  int|null $start_month (optional)
     * @param  int|null $start_year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1DataFeatureMonthlySummaryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DataFeatureMonthlySummaryGetRequest($end_month = null, $end_year = null, $feature_name = null, $page_size = null, $start_key = null, $start_month = null, $start_year = null, string $contentType = self::contentTypes['v1DataFeatureMonthlySummaryGet'][0])
    {









        $resourcePath = '/v1/data/feature_monthly_summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_month,
            'end_month', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_year,
            'end_year', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $feature_name,
            'feature_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_key,
            'start_key', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_month,
            'start_month', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_year,
            'start_year', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
