<?php
/**
 * ServiceCdrOutputShort
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ServiceCdrOutputShort Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServiceCdrOutputShort implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'service.CdrOutputShort';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authorizing_id' => 'string',
        'billing_seconds' => 'int',
        'bridge_id' => 'string',
        'call_id' => 'string',
        'call_priority' => 'string',
        'call_type' => 'string',
        'callee_id_name' => 'string',
        'callee_id_number' => 'string',
        'caller_id_name' => 'string',
        'caller_id_number' => 'string',
        'calling_from' => 'string',
        'cost' => 'string',
        'dialed_number' => 'string',
        'direction' => 'string',
        'duration_seconds' => 'int',
        'from' => 'string',
        'hangup_cause' => 'string',
        'id' => 'string',
        'interaction_id' => 'string',
        'media_recordings' => 'object[]',
        'media_server' => 'string',
        'other_leg_call_id' => 'string',
        'owner_id' => 'string',
        'rate' => 'string',
        'rate_name' => 'string',
        'recording_url' => 'string',
        'request' => 'string',
        'timestamp' => 'int',
        'timestamp_datetime' => 'string',
        'to' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authorizing_id' => null,
        'billing_seconds' => null,
        'bridge_id' => null,
        'call_id' => null,
        'call_priority' => null,
        'call_type' => null,
        'callee_id_name' => null,
        'callee_id_number' => null,
        'caller_id_name' => null,
        'caller_id_number' => null,
        'calling_from' => null,
        'cost' => null,
        'dialed_number' => null,
        'direction' => null,
        'duration_seconds' => null,
        'from' => null,
        'hangup_cause' => null,
        'id' => null,
        'interaction_id' => null,
        'media_recordings' => null,
        'media_server' => null,
        'other_leg_call_id' => null,
        'owner_id' => null,
        'rate' => null,
        'rate_name' => null,
        'recording_url' => null,
        'request' => null,
        'timestamp' => null,
        'timestamp_datetime' => null,
        'to' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'authorizing_id' => false,
        'billing_seconds' => false,
        'bridge_id' => false,
        'call_id' => false,
        'call_priority' => false,
        'call_type' => false,
        'callee_id_name' => false,
        'callee_id_number' => false,
        'caller_id_name' => false,
        'caller_id_number' => false,
        'calling_from' => false,
        'cost' => false,
        'dialed_number' => false,
        'direction' => false,
        'duration_seconds' => false,
        'from' => false,
        'hangup_cause' => false,
        'id' => false,
        'interaction_id' => false,
        'media_recordings' => false,
        'media_server' => false,
        'other_leg_call_id' => false,
        'owner_id' => false,
        'rate' => false,
        'rate_name' => false,
        'recording_url' => false,
        'request' => false,
        'timestamp' => false,
        'timestamp_datetime' => false,
        'to' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorizing_id' => 'authorizing_id',
        'billing_seconds' => 'billing_seconds',
        'bridge_id' => 'bridge_id',
        'call_id' => 'call_id',
        'call_priority' => 'call_priority',
        'call_type' => 'call_type',
        'callee_id_name' => 'callee_id_name',
        'callee_id_number' => 'callee_id_number',
        'caller_id_name' => 'caller_id_name',
        'caller_id_number' => 'caller_id_number',
        'calling_from' => 'calling_from',
        'cost' => 'cost',
        'dialed_number' => 'dialed_number',
        'direction' => 'direction',
        'duration_seconds' => 'duration_seconds',
        'from' => 'from',
        'hangup_cause' => 'hangup_cause',
        'id' => 'id',
        'interaction_id' => 'interaction_id',
        'media_recordings' => 'media_recordings',
        'media_server' => 'media_server',
        'other_leg_call_id' => 'other_leg_call_id',
        'owner_id' => 'owner_id',
        'rate' => 'rate',
        'rate_name' => 'rate_name',
        'recording_url' => 'recording_url',
        'request' => 'request',
        'timestamp' => 'timestamp',
        'timestamp_datetime' => 'timestamp_datetime',
        'to' => 'to'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorizing_id' => 'setAuthorizingId',
        'billing_seconds' => 'setBillingSeconds',
        'bridge_id' => 'setBridgeId',
        'call_id' => 'setCallId',
        'call_priority' => 'setCallPriority',
        'call_type' => 'setCallType',
        'callee_id_name' => 'setCalleeIdName',
        'callee_id_number' => 'setCalleeIdNumber',
        'caller_id_name' => 'setCallerIdName',
        'caller_id_number' => 'setCallerIdNumber',
        'calling_from' => 'setCallingFrom',
        'cost' => 'setCost',
        'dialed_number' => 'setDialedNumber',
        'direction' => 'setDirection',
        'duration_seconds' => 'setDurationSeconds',
        'from' => 'setFrom',
        'hangup_cause' => 'setHangupCause',
        'id' => 'setId',
        'interaction_id' => 'setInteractionId',
        'media_recordings' => 'setMediaRecordings',
        'media_server' => 'setMediaServer',
        'other_leg_call_id' => 'setOtherLegCallId',
        'owner_id' => 'setOwnerId',
        'rate' => 'setRate',
        'rate_name' => 'setRateName',
        'recording_url' => 'setRecordingUrl',
        'request' => 'setRequest',
        'timestamp' => 'setTimestamp',
        'timestamp_datetime' => 'setTimestampDatetime',
        'to' => 'setTo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorizing_id' => 'getAuthorizingId',
        'billing_seconds' => 'getBillingSeconds',
        'bridge_id' => 'getBridgeId',
        'call_id' => 'getCallId',
        'call_priority' => 'getCallPriority',
        'call_type' => 'getCallType',
        'callee_id_name' => 'getCalleeIdName',
        'callee_id_number' => 'getCalleeIdNumber',
        'caller_id_name' => 'getCallerIdName',
        'caller_id_number' => 'getCallerIdNumber',
        'calling_from' => 'getCallingFrom',
        'cost' => 'getCost',
        'dialed_number' => 'getDialedNumber',
        'direction' => 'getDirection',
        'duration_seconds' => 'getDurationSeconds',
        'from' => 'getFrom',
        'hangup_cause' => 'getHangupCause',
        'id' => 'getId',
        'interaction_id' => 'getInteractionId',
        'media_recordings' => 'getMediaRecordings',
        'media_server' => 'getMediaServer',
        'other_leg_call_id' => 'getOtherLegCallId',
        'owner_id' => 'getOwnerId',
        'rate' => 'getRate',
        'rate_name' => 'getRateName',
        'recording_url' => 'getRecordingUrl',
        'request' => 'getRequest',
        'timestamp' => 'getTimestamp',
        'timestamp_datetime' => 'getTimestampDatetime',
        'to' => 'getTo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('authorizing_id', $data ?? [], null);
        $this->setIfExists('billing_seconds', $data ?? [], null);
        $this->setIfExists('bridge_id', $data ?? [], null);
        $this->setIfExists('call_id', $data ?? [], null);
        $this->setIfExists('call_priority', $data ?? [], null);
        $this->setIfExists('call_type', $data ?? [], null);
        $this->setIfExists('callee_id_name', $data ?? [], null);
        $this->setIfExists('callee_id_number', $data ?? [], null);
        $this->setIfExists('caller_id_name', $data ?? [], null);
        $this->setIfExists('caller_id_number', $data ?? [], null);
        $this->setIfExists('calling_from', $data ?? [], null);
        $this->setIfExists('cost', $data ?? [], null);
        $this->setIfExists('dialed_number', $data ?? [], null);
        $this->setIfExists('direction', $data ?? [], null);
        $this->setIfExists('duration_seconds', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('hangup_cause', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('interaction_id', $data ?? [], null);
        $this->setIfExists('media_recordings', $data ?? [], null);
        $this->setIfExists('media_server', $data ?? [], null);
        $this->setIfExists('other_leg_call_id', $data ?? [], null);
        $this->setIfExists('owner_id', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('rate_name', $data ?? [], null);
        $this->setIfExists('recording_url', $data ?? [], null);
        $this->setIfExists('request', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('timestamp_datetime', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorizing_id
     *
     * @return string|null
     */
    public function getAuthorizingId()
    {
        return $this->container['authorizing_id'];
    }

    /**
     * Sets authorizing_id
     *
     * @param string|null $authorizing_id authorizing_id
     *
     * @return self
     */
    public function setAuthorizingId($authorizing_id)
    {
        if (is_null($authorizing_id)) {
            throw new \InvalidArgumentException('non-nullable authorizing_id cannot be null');
        }
        $this->container['authorizing_id'] = $authorizing_id;

        return $this;
    }

    /**
     * Gets billing_seconds
     *
     * @return int|null
     */
    public function getBillingSeconds()
    {
        return $this->container['billing_seconds'];
    }

    /**
     * Sets billing_seconds
     *
     * @param int|null $billing_seconds billing_seconds
     *
     * @return self
     */
    public function setBillingSeconds($billing_seconds)
    {
        if (is_null($billing_seconds)) {
            throw new \InvalidArgumentException('non-nullable billing_seconds cannot be null');
        }
        $this->container['billing_seconds'] = $billing_seconds;

        return $this;
    }

    /**
     * Gets bridge_id
     *
     * @return string|null
     */
    public function getBridgeId()
    {
        return $this->container['bridge_id'];
    }

    /**
     * Sets bridge_id
     *
     * @param string|null $bridge_id bridge_id
     *
     * @return self
     */
    public function setBridgeId($bridge_id)
    {
        if (is_null($bridge_id)) {
            throw new \InvalidArgumentException('non-nullable bridge_id cannot be null');
        }
        $this->container['bridge_id'] = $bridge_id;

        return $this;
    }

    /**
     * Gets call_id
     *
     * @return string|null
     */
    public function getCallId()
    {
        return $this->container['call_id'];
    }

    /**
     * Sets call_id
     *
     * @param string|null $call_id call_id
     *
     * @return self
     */
    public function setCallId($call_id)
    {
        if (is_null($call_id)) {
            throw new \InvalidArgumentException('non-nullable call_id cannot be null');
        }
        $this->container['call_id'] = $call_id;

        return $this;
    }

    /**
     * Gets call_priority
     *
     * @return string|null
     */
    public function getCallPriority()
    {
        return $this->container['call_priority'];
    }

    /**
     * Sets call_priority
     *
     * @param string|null $call_priority call_priority
     *
     * @return self
     */
    public function setCallPriority($call_priority)
    {
        if (is_null($call_priority)) {
            throw new \InvalidArgumentException('non-nullable call_priority cannot be null');
        }
        $this->container['call_priority'] = $call_priority;

        return $this;
    }

    /**
     * Gets call_type
     *
     * @return string|null
     */
    public function getCallType()
    {
        return $this->container['call_type'];
    }

    /**
     * Sets call_type
     *
     * @param string|null $call_type call_type
     *
     * @return self
     */
    public function setCallType($call_type)
    {
        if (is_null($call_type)) {
            throw new \InvalidArgumentException('non-nullable call_type cannot be null');
        }
        $this->container['call_type'] = $call_type;

        return $this;
    }

    /**
     * Gets callee_id_name
     *
     * @return string|null
     */
    public function getCalleeIdName()
    {
        return $this->container['callee_id_name'];
    }

    /**
     * Sets callee_id_name
     *
     * @param string|null $callee_id_name callee_id_name
     *
     * @return self
     */
    public function setCalleeIdName($callee_id_name)
    {
        if (is_null($callee_id_name)) {
            throw new \InvalidArgumentException('non-nullable callee_id_name cannot be null');
        }
        $this->container['callee_id_name'] = $callee_id_name;

        return $this;
    }

    /**
     * Gets callee_id_number
     *
     * @return string|null
     */
    public function getCalleeIdNumber()
    {
        return $this->container['callee_id_number'];
    }

    /**
     * Sets callee_id_number
     *
     * @param string|null $callee_id_number callee_id_number
     *
     * @return self
     */
    public function setCalleeIdNumber($callee_id_number)
    {
        if (is_null($callee_id_number)) {
            throw new \InvalidArgumentException('non-nullable callee_id_number cannot be null');
        }
        $this->container['callee_id_number'] = $callee_id_number;

        return $this;
    }

    /**
     * Gets caller_id_name
     *
     * @return string|null
     */
    public function getCallerIdName()
    {
        return $this->container['caller_id_name'];
    }

    /**
     * Sets caller_id_name
     *
     * @param string|null $caller_id_name caller_id_name
     *
     * @return self
     */
    public function setCallerIdName($caller_id_name)
    {
        if (is_null($caller_id_name)) {
            throw new \InvalidArgumentException('non-nullable caller_id_name cannot be null');
        }
        $this->container['caller_id_name'] = $caller_id_name;

        return $this;
    }

    /**
     * Gets caller_id_number
     *
     * @return string|null
     */
    public function getCallerIdNumber()
    {
        return $this->container['caller_id_number'];
    }

    /**
     * Sets caller_id_number
     *
     * @param string|null $caller_id_number caller_id_number
     *
     * @return self
     */
    public function setCallerIdNumber($caller_id_number)
    {
        if (is_null($caller_id_number)) {
            throw new \InvalidArgumentException('non-nullable caller_id_number cannot be null');
        }
        $this->container['caller_id_number'] = $caller_id_number;

        return $this;
    }

    /**
     * Gets calling_from
     *
     * @return string|null
     */
    public function getCallingFrom()
    {
        return $this->container['calling_from'];
    }

    /**
     * Sets calling_from
     *
     * @param string|null $calling_from calling_from
     *
     * @return self
     */
    public function setCallingFrom($calling_from)
    {
        if (is_null($calling_from)) {
            throw new \InvalidArgumentException('non-nullable calling_from cannot be null');
        }
        $this->container['calling_from'] = $calling_from;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return string|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param string|null $cost cost
     *
     * @return self
     */
    public function setCost($cost)
    {
        if (is_null($cost)) {
            throw new \InvalidArgumentException('non-nullable cost cannot be null');
        }
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets dialed_number
     *
     * @return string|null
     */
    public function getDialedNumber()
    {
        return $this->container['dialed_number'];
    }

    /**
     * Sets dialed_number
     *
     * @param string|null $dialed_number dialed_number
     *
     * @return self
     */
    public function setDialedNumber($dialed_number)
    {
        if (is_null($dialed_number)) {
            throw new \InvalidArgumentException('non-nullable dialed_number cannot be null');
        }
        $this->container['dialed_number'] = $dialed_number;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string|null
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string|null $direction direction
     *
     * @return self
     */
    public function setDirection($direction)
    {
        if (is_null($direction)) {
            throw new \InvalidArgumentException('non-nullable direction cannot be null');
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets duration_seconds
     *
     * @return int|null
     */
    public function getDurationSeconds()
    {
        return $this->container['duration_seconds'];
    }

    /**
     * Sets duration_seconds
     *
     * @param int|null $duration_seconds duration_seconds
     *
     * @return self
     */
    public function setDurationSeconds($duration_seconds)
    {
        if (is_null($duration_seconds)) {
            throw new \InvalidArgumentException('non-nullable duration_seconds cannot be null');
        }
        $this->container['duration_seconds'] = $duration_seconds;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from from
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets hangup_cause
     *
     * @return string|null
     */
    public function getHangupCause()
    {
        return $this->container['hangup_cause'];
    }

    /**
     * Sets hangup_cause
     *
     * @param string|null $hangup_cause hangup_cause
     *
     * @return self
     */
    public function setHangupCause($hangup_cause)
    {
        if (is_null($hangup_cause)) {
            throw new \InvalidArgumentException('non-nullable hangup_cause cannot be null');
        }
        $this->container['hangup_cause'] = $hangup_cause;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets interaction_id
     *
     * @return string|null
     */
    public function getInteractionId()
    {
        return $this->container['interaction_id'];
    }

    /**
     * Sets interaction_id
     *
     * @param string|null $interaction_id interaction_id
     *
     * @return self
     */
    public function setInteractionId($interaction_id)
    {
        if (is_null($interaction_id)) {
            throw new \InvalidArgumentException('non-nullable interaction_id cannot be null');
        }
        $this->container['interaction_id'] = $interaction_id;

        return $this;
    }

    /**
     * Gets media_recordings
     *
     * @return object[]|null
     */
    public function getMediaRecordings()
    {
        return $this->container['media_recordings'];
    }

    /**
     * Sets media_recordings
     *
     * @param object[]|null $media_recordings media_recordings
     *
     * @return self
     */
    public function setMediaRecordings($media_recordings)
    {
        if (is_null($media_recordings)) {
            throw new \InvalidArgumentException('non-nullable media_recordings cannot be null');
        }
        $this->container['media_recordings'] = $media_recordings;

        return $this;
    }

    /**
     * Gets media_server
     *
     * @return string|null
     */
    public function getMediaServer()
    {
        return $this->container['media_server'];
    }

    /**
     * Sets media_server
     *
     * @param string|null $media_server media_server
     *
     * @return self
     */
    public function setMediaServer($media_server)
    {
        if (is_null($media_server)) {
            throw new \InvalidArgumentException('non-nullable media_server cannot be null');
        }
        $this->container['media_server'] = $media_server;

        return $this;
    }

    /**
     * Gets other_leg_call_id
     *
     * @return string|null
     */
    public function getOtherLegCallId()
    {
        return $this->container['other_leg_call_id'];
    }

    /**
     * Sets other_leg_call_id
     *
     * @param string|null $other_leg_call_id other_leg_call_id
     *
     * @return self
     */
    public function setOtherLegCallId($other_leg_call_id)
    {
        if (is_null($other_leg_call_id)) {
            throw new \InvalidArgumentException('non-nullable other_leg_call_id cannot be null');
        }
        $this->container['other_leg_call_id'] = $other_leg_call_id;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return string|null
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param string|null $owner_id owner_id
     *
     * @return self
     */
    public function setOwnerId($owner_id)
    {
        if (is_null($owner_id)) {
            throw new \InvalidArgumentException('non-nullable owner_id cannot be null');
        }
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return string|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param string|null $rate rate
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets rate_name
     *
     * @return string|null
     */
    public function getRateName()
    {
        return $this->container['rate_name'];
    }

    /**
     * Sets rate_name
     *
     * @param string|null $rate_name rate_name
     *
     * @return self
     */
    public function setRateName($rate_name)
    {
        if (is_null($rate_name)) {
            throw new \InvalidArgumentException('non-nullable rate_name cannot be null');
        }
        $this->container['rate_name'] = $rate_name;

        return $this;
    }

    /**
     * Gets recording_url
     *
     * @return string|null
     */
    public function getRecordingUrl()
    {
        return $this->container['recording_url'];
    }

    /**
     * Sets recording_url
     *
     * @param string|null $recording_url recording_url
     *
     * @return self
     */
    public function setRecordingUrl($recording_url)
    {
        if (is_null($recording_url)) {
            throw new \InvalidArgumentException('non-nullable recording_url cannot be null');
        }
        $this->container['recording_url'] = $recording_url;

        return $this;
    }

    /**
     * Gets request
     *
     * @return string|null
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param string|null $request request
     *
     * @return self
     */
    public function setRequest($request)
    {
        if (is_null($request)) {
            throw new \InvalidArgumentException('non-nullable request cannot be null');
        }
        $this->container['request'] = $request;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets timestamp_datetime
     *
     * @return string|null
     */
    public function getTimestampDatetime()
    {
        return $this->container['timestamp_datetime'];
    }

    /**
     * Sets timestamp_datetime
     *
     * @param string|null $timestamp_datetime timestamp_datetime
     *
     * @return self
     */
    public function setTimestampDatetime($timestamp_datetime)
    {
        if (is_null($timestamp_datetime)) {
            throw new \InvalidArgumentException('non-nullable timestamp_datetime cannot be null');
        }
        $this->container['timestamp_datetime'] = $timestamp_datetime;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to to
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


