<?php
/**
 * ServiceE911LocationOutput
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ServiceE911LocationOutput Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServiceE911LocationOutput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'service.E911LocationOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activated_time' => 'string',
        'address_1' => 'string',
        'address_2' => 'string',
        'caller_name' => 'string',
        'comments' => 'string',
        'community' => 'string',
        'customer_order_id' => 'string',
        'latitude' => 'float',
        'legacy_data' => '\OpenAPI\Client\Model\ServiceE911LegacyDataOutput',
        'location_id' => 'string',
        'longitude' => 'float',
        'plus_four' => 'string',
        'postal_code' => 'string',
        'state' => 'string',
        'status' => '\OpenAPI\Client\Model\ServiceE911StatusOutput',
        'type' => 'string',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'activated_time' => null,
        'address_1' => null,
        'address_2' => null,
        'caller_name' => null,
        'comments' => null,
        'community' => null,
        'customer_order_id' => null,
        'latitude' => null,
        'legacy_data' => null,
        'location_id' => null,
        'longitude' => null,
        'plus_four' => null,
        'postal_code' => null,
        'state' => null,
        'status' => null,
        'type' => null,
        'update_time' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'activated_time' => false,
        'address_1' => false,
        'address_2' => false,
        'caller_name' => false,
        'comments' => false,
        'community' => false,
        'customer_order_id' => false,
        'latitude' => false,
        'legacy_data' => false,
        'location_id' => false,
        'longitude' => false,
        'plus_four' => false,
        'postal_code' => false,
        'state' => false,
        'status' => false,
        'type' => false,
        'update_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activated_time' => 'activated_time',
        'address_1' => 'address_1',
        'address_2' => 'address_2',
        'caller_name' => 'caller_name',
        'comments' => 'comments',
        'community' => 'community',
        'customer_order_id' => 'customer_order_id',
        'latitude' => 'latitude',
        'legacy_data' => 'legacy_data',
        'location_id' => 'location_id',
        'longitude' => 'longitude',
        'plus_four' => 'plus_four',
        'postal_code' => 'postal_code',
        'state' => 'state',
        'status' => 'status',
        'type' => 'type',
        'update_time' => 'update_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activated_time' => 'setActivatedTime',
        'address_1' => 'setAddress1',
        'address_2' => 'setAddress2',
        'caller_name' => 'setCallerName',
        'comments' => 'setComments',
        'community' => 'setCommunity',
        'customer_order_id' => 'setCustomerOrderId',
        'latitude' => 'setLatitude',
        'legacy_data' => 'setLegacyData',
        'location_id' => 'setLocationId',
        'longitude' => 'setLongitude',
        'plus_four' => 'setPlusFour',
        'postal_code' => 'setPostalCode',
        'state' => 'setState',
        'status' => 'setStatus',
        'type' => 'setType',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activated_time' => 'getActivatedTime',
        'address_1' => 'getAddress1',
        'address_2' => 'getAddress2',
        'caller_name' => 'getCallerName',
        'comments' => 'getComments',
        'community' => 'getCommunity',
        'customer_order_id' => 'getCustomerOrderId',
        'latitude' => 'getLatitude',
        'legacy_data' => 'getLegacyData',
        'location_id' => 'getLocationId',
        'longitude' => 'getLongitude',
        'plus_four' => 'getPlusFour',
        'postal_code' => 'getPostalCode',
        'state' => 'getState',
        'status' => 'getStatus',
        'type' => 'getType',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('activated_time', $data ?? [], null);
        $this->setIfExists('address_1', $data ?? [], null);
        $this->setIfExists('address_2', $data ?? [], null);
        $this->setIfExists('caller_name', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('community', $data ?? [], null);
        $this->setIfExists('customer_order_id', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('legacy_data', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('plus_four', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('update_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activated_time
     *
     * @return string|null
     */
    public function getActivatedTime()
    {
        return $this->container['activated_time'];
    }

    /**
     * Sets activated_time
     *
     * @param string|null $activated_time activated_time
     *
     * @return self
     */
    public function setActivatedTime($activated_time)
    {
        if (is_null($activated_time)) {
            throw new \InvalidArgumentException('non-nullable activated_time cannot be null');
        }
        $this->container['activated_time'] = $activated_time;

        return $this;
    }

    /**
     * Gets address_1
     *
     * @return string|null
     */
    public function getAddress1()
    {
        return $this->container['address_1'];
    }

    /**
     * Sets address_1
     *
     * @param string|null $address_1 address_1
     *
     * @return self
     */
    public function setAddress1($address_1)
    {
        if (is_null($address_1)) {
            throw new \InvalidArgumentException('non-nullable address_1 cannot be null');
        }
        $this->container['address_1'] = $address_1;

        return $this;
    }

    /**
     * Gets address_2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address_2'];
    }

    /**
     * Sets address_2
     *
     * @param string|null $address_2 address_2
     *
     * @return self
     */
    public function setAddress2($address_2)
    {
        if (is_null($address_2)) {
            throw new \InvalidArgumentException('non-nullable address_2 cannot be null');
        }
        $this->container['address_2'] = $address_2;

        return $this;
    }

    /**
     * Gets caller_name
     *
     * @return string|null
     */
    public function getCallerName()
    {
        return $this->container['caller_name'];
    }

    /**
     * Sets caller_name
     *
     * @param string|null $caller_name caller_name
     *
     * @return self
     */
    public function setCallerName($caller_name)
    {
        if (is_null($caller_name)) {
            throw new \InvalidArgumentException('non-nullable caller_name cannot be null');
        }
        $this->container['caller_name'] = $caller_name;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets community
     *
     * @return string|null
     */
    public function getCommunity()
    {
        return $this->container['community'];
    }

    /**
     * Sets community
     *
     * @param string|null $community community
     *
     * @return self
     */
    public function setCommunity($community)
    {
        if (is_null($community)) {
            throw new \InvalidArgumentException('non-nullable community cannot be null');
        }
        $this->container['community'] = $community;

        return $this;
    }

    /**
     * Gets customer_order_id
     *
     * @return string|null
     */
    public function getCustomerOrderId()
    {
        return $this->container['customer_order_id'];
    }

    /**
     * Sets customer_order_id
     *
     * @param string|null $customer_order_id customer_order_id
     *
     * @return self
     */
    public function setCustomerOrderId($customer_order_id)
    {
        if (is_null($customer_order_id)) {
            throw new \InvalidArgumentException('non-nullable customer_order_id cannot be null');
        }
        $this->container['customer_order_id'] = $customer_order_id;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float|null $latitude latitude
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            throw new \InvalidArgumentException('non-nullable latitude cannot be null');
        }
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets legacy_data
     *
     * @return \OpenAPI\Client\Model\ServiceE911LegacyDataOutput|null
     */
    public function getLegacyData()
    {
        return $this->container['legacy_data'];
    }

    /**
     * Sets legacy_data
     *
     * @param \OpenAPI\Client\Model\ServiceE911LegacyDataOutput|null $legacy_data legacy_data
     *
     * @return self
     */
    public function setLegacyData($legacy_data)
    {
        if (is_null($legacy_data)) {
            throw new \InvalidArgumentException('non-nullable legacy_data cannot be null');
        }
        $this->container['legacy_data'] = $legacy_data;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return string|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param string|null $location_id location_id
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            throw new \InvalidArgumentException('non-nullable location_id cannot be null');
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float|null $longitude longitude
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            throw new \InvalidArgumentException('non-nullable longitude cannot be null');
        }
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets plus_four
     *
     * @return string|null
     */
    public function getPlusFour()
    {
        return $this->container['plus_four'];
    }

    /**
     * Sets plus_four
     *
     * @param string|null $plus_four plus_four
     *
     * @return self
     */
    public function setPlusFour($plus_four)
    {
        if (is_null($plus_four)) {
            throw new \InvalidArgumentException('non-nullable plus_four cannot be null');
        }
        $this->container['plus_four'] = $plus_four;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\ServiceE911StatusOutput|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\ServiceE911StatusOutput|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string|null
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string|null $update_time update_time
     *
     * @return self
     */
    public function setUpdateTime($update_time)
    {
        if (is_null($update_time)) {
            throw new \InvalidArgumentException('non-nullable update_time cannot be null');
        }
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


