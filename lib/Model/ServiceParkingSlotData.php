<?php
/**
 * ServiceParkingSlotData
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ServiceParkingSlotData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServiceParkingSlotData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'service.ParkingSlotData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attended' => 'bool',
        'call_id' => 'string',
        'cid_name' => 'string',
        'cid_number' => 'string',
        'cid_uri' => 'string',
        'from_tag' => 'string',
        'node' => 'string',
        'presence_id' => 'string',
        'presence_realm' => 'string',
        'presence_type' => 'string',
        'presence_user' => 'string',
        'ringback_id' => 'string',
        'slot_call_id' => 'string',
        'switch_uri' => 'string',
        'to_tag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'attended' => null,
        'call_id' => null,
        'cid_name' => null,
        'cid_number' => null,
        'cid_uri' => null,
        'from_tag' => null,
        'node' => null,
        'presence_id' => null,
        'presence_realm' => null,
        'presence_type' => null,
        'presence_user' => null,
        'ringback_id' => null,
        'slot_call_id' => null,
        'switch_uri' => null,
        'to_tag' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'attended' => false,
        'call_id' => false,
        'cid_name' => false,
        'cid_number' => false,
        'cid_uri' => false,
        'from_tag' => false,
        'node' => false,
        'presence_id' => false,
        'presence_realm' => false,
        'presence_type' => false,
        'presence_user' => false,
        'ringback_id' => false,
        'slot_call_id' => false,
        'switch_uri' => false,
        'to_tag' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attended' => 'attended',
        'call_id' => 'call_id',
        'cid_name' => 'cid_name',
        'cid_number' => 'cid_number',
        'cid_uri' => 'cid_uri',
        'from_tag' => 'from_tag',
        'node' => 'node',
        'presence_id' => 'presence_id',
        'presence_realm' => 'presence_realm',
        'presence_type' => 'presence_type',
        'presence_user' => 'presence_user',
        'ringback_id' => 'ringback_id',
        'slot_call_id' => 'slot_call_id',
        'switch_uri' => 'switch_uri',
        'to_tag' => 'to_tag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attended' => 'setAttended',
        'call_id' => 'setCallId',
        'cid_name' => 'setCidName',
        'cid_number' => 'setCidNumber',
        'cid_uri' => 'setCidUri',
        'from_tag' => 'setFromTag',
        'node' => 'setNode',
        'presence_id' => 'setPresenceId',
        'presence_realm' => 'setPresenceRealm',
        'presence_type' => 'setPresenceType',
        'presence_user' => 'setPresenceUser',
        'ringback_id' => 'setRingbackId',
        'slot_call_id' => 'setSlotCallId',
        'switch_uri' => 'setSwitchUri',
        'to_tag' => 'setToTag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attended' => 'getAttended',
        'call_id' => 'getCallId',
        'cid_name' => 'getCidName',
        'cid_number' => 'getCidNumber',
        'cid_uri' => 'getCidUri',
        'from_tag' => 'getFromTag',
        'node' => 'getNode',
        'presence_id' => 'getPresenceId',
        'presence_realm' => 'getPresenceRealm',
        'presence_type' => 'getPresenceType',
        'presence_user' => 'getPresenceUser',
        'ringback_id' => 'getRingbackId',
        'slot_call_id' => 'getSlotCallId',
        'switch_uri' => 'getSwitchUri',
        'to_tag' => 'getToTag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('attended', $data ?? [], null);
        $this->setIfExists('call_id', $data ?? [], null);
        $this->setIfExists('cid_name', $data ?? [], null);
        $this->setIfExists('cid_number', $data ?? [], null);
        $this->setIfExists('cid_uri', $data ?? [], null);
        $this->setIfExists('from_tag', $data ?? [], null);
        $this->setIfExists('node', $data ?? [], null);
        $this->setIfExists('presence_id', $data ?? [], null);
        $this->setIfExists('presence_realm', $data ?? [], null);
        $this->setIfExists('presence_type', $data ?? [], null);
        $this->setIfExists('presence_user', $data ?? [], null);
        $this->setIfExists('ringback_id', $data ?? [], null);
        $this->setIfExists('slot_call_id', $data ?? [], null);
        $this->setIfExists('switch_uri', $data ?? [], null);
        $this->setIfExists('to_tag', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attended
     *
     * @return bool|null
     */
    public function getAttended()
    {
        return $this->container['attended'];
    }

    /**
     * Sets attended
     *
     * @param bool|null $attended attended
     *
     * @return self
     */
    public function setAttended($attended)
    {
        if (is_null($attended)) {
            throw new \InvalidArgumentException('non-nullable attended cannot be null');
        }
        $this->container['attended'] = $attended;

        return $this;
    }

    /**
     * Gets call_id
     *
     * @return string|null
     */
    public function getCallId()
    {
        return $this->container['call_id'];
    }

    /**
     * Sets call_id
     *
     * @param string|null $call_id call_id
     *
     * @return self
     */
    public function setCallId($call_id)
    {
        if (is_null($call_id)) {
            throw new \InvalidArgumentException('non-nullable call_id cannot be null');
        }
        $this->container['call_id'] = $call_id;

        return $this;
    }

    /**
     * Gets cid_name
     *
     * @return string|null
     */
    public function getCidName()
    {
        return $this->container['cid_name'];
    }

    /**
     * Sets cid_name
     *
     * @param string|null $cid_name cid_name
     *
     * @return self
     */
    public function setCidName($cid_name)
    {
        if (is_null($cid_name)) {
            throw new \InvalidArgumentException('non-nullable cid_name cannot be null');
        }
        $this->container['cid_name'] = $cid_name;

        return $this;
    }

    /**
     * Gets cid_number
     *
     * @return string|null
     */
    public function getCidNumber()
    {
        return $this->container['cid_number'];
    }

    /**
     * Sets cid_number
     *
     * @param string|null $cid_number cid_number
     *
     * @return self
     */
    public function setCidNumber($cid_number)
    {
        if (is_null($cid_number)) {
            throw new \InvalidArgumentException('non-nullable cid_number cannot be null');
        }
        $this->container['cid_number'] = $cid_number;

        return $this;
    }

    /**
     * Gets cid_uri
     *
     * @return string|null
     */
    public function getCidUri()
    {
        return $this->container['cid_uri'];
    }

    /**
     * Sets cid_uri
     *
     * @param string|null $cid_uri cid_uri
     *
     * @return self
     */
    public function setCidUri($cid_uri)
    {
        if (is_null($cid_uri)) {
            throw new \InvalidArgumentException('non-nullable cid_uri cannot be null');
        }
        $this->container['cid_uri'] = $cid_uri;

        return $this;
    }

    /**
     * Gets from_tag
     *
     * @return string|null
     */
    public function getFromTag()
    {
        return $this->container['from_tag'];
    }

    /**
     * Sets from_tag
     *
     * @param string|null $from_tag from_tag
     *
     * @return self
     */
    public function setFromTag($from_tag)
    {
        if (is_null($from_tag)) {
            throw new \InvalidArgumentException('non-nullable from_tag cannot be null');
        }
        $this->container['from_tag'] = $from_tag;

        return $this;
    }

    /**
     * Gets node
     *
     * @return string|null
     */
    public function getNode()
    {
        return $this->container['node'];
    }

    /**
     * Sets node
     *
     * @param string|null $node node
     *
     * @return self
     */
    public function setNode($node)
    {
        if (is_null($node)) {
            throw new \InvalidArgumentException('non-nullable node cannot be null');
        }
        $this->container['node'] = $node;

        return $this;
    }

    /**
     * Gets presence_id
     *
     * @return string|null
     */
    public function getPresenceId()
    {
        return $this->container['presence_id'];
    }

    /**
     * Sets presence_id
     *
     * @param string|null $presence_id presence_id
     *
     * @return self
     */
    public function setPresenceId($presence_id)
    {
        if (is_null($presence_id)) {
            throw new \InvalidArgumentException('non-nullable presence_id cannot be null');
        }
        $this->container['presence_id'] = $presence_id;

        return $this;
    }

    /**
     * Gets presence_realm
     *
     * @return string|null
     */
    public function getPresenceRealm()
    {
        return $this->container['presence_realm'];
    }

    /**
     * Sets presence_realm
     *
     * @param string|null $presence_realm presence_realm
     *
     * @return self
     */
    public function setPresenceRealm($presence_realm)
    {
        if (is_null($presence_realm)) {
            throw new \InvalidArgumentException('non-nullable presence_realm cannot be null');
        }
        $this->container['presence_realm'] = $presence_realm;

        return $this;
    }

    /**
     * Gets presence_type
     *
     * @return string|null
     */
    public function getPresenceType()
    {
        return $this->container['presence_type'];
    }

    /**
     * Sets presence_type
     *
     * @param string|null $presence_type presence_type
     *
     * @return self
     */
    public function setPresenceType($presence_type)
    {
        if (is_null($presence_type)) {
            throw new \InvalidArgumentException('non-nullable presence_type cannot be null');
        }
        $this->container['presence_type'] = $presence_type;

        return $this;
    }

    /**
     * Gets presence_user
     *
     * @return string|null
     */
    public function getPresenceUser()
    {
        return $this->container['presence_user'];
    }

    /**
     * Sets presence_user
     *
     * @param string|null $presence_user presence_user
     *
     * @return self
     */
    public function setPresenceUser($presence_user)
    {
        if (is_null($presence_user)) {
            throw new \InvalidArgumentException('non-nullable presence_user cannot be null');
        }
        $this->container['presence_user'] = $presence_user;

        return $this;
    }

    /**
     * Gets ringback_id
     *
     * @return string|null
     */
    public function getRingbackId()
    {
        return $this->container['ringback_id'];
    }

    /**
     * Sets ringback_id
     *
     * @param string|null $ringback_id ringback_id
     *
     * @return self
     */
    public function setRingbackId($ringback_id)
    {
        if (is_null($ringback_id)) {
            throw new \InvalidArgumentException('non-nullable ringback_id cannot be null');
        }
        $this->container['ringback_id'] = $ringback_id;

        return $this;
    }

    /**
     * Gets slot_call_id
     *
     * @return string|null
     */
    public function getSlotCallId()
    {
        return $this->container['slot_call_id'];
    }

    /**
     * Sets slot_call_id
     *
     * @param string|null $slot_call_id slot_call_id
     *
     * @return self
     */
    public function setSlotCallId($slot_call_id)
    {
        if (is_null($slot_call_id)) {
            throw new \InvalidArgumentException('non-nullable slot_call_id cannot be null');
        }
        $this->container['slot_call_id'] = $slot_call_id;

        return $this;
    }

    /**
     * Gets switch_uri
     *
     * @return string|null
     */
    public function getSwitchUri()
    {
        return $this->container['switch_uri'];
    }

    /**
     * Sets switch_uri
     *
     * @param string|null $switch_uri switch_uri
     *
     * @return self
     */
    public function setSwitchUri($switch_uri)
    {
        if (is_null($switch_uri)) {
            throw new \InvalidArgumentException('non-nullable switch_uri cannot be null');
        }
        $this->container['switch_uri'] = $switch_uri;

        return $this;
    }

    /**
     * Gets to_tag
     *
     * @return string|null
     */
    public function getToTag()
    {
        return $this->container['to_tag'];
    }

    /**
     * Sets to_tag
     *
     * @param string|null $to_tag to_tag
     *
     * @return self
     */
    public function setToTag($to_tag)
    {
        if (is_null($to_tag)) {
            throw new \InvalidArgumentException('non-nullable to_tag cannot be null');
        }
        $this->container['to_tag'] = $to_tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


