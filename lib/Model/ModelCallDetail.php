<?php
/**
 * ModelCallDetail
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModelCallDetail Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModelCallDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'model.CallDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'string',
        'call_duration' => 'string',
        'call_id' => 'string',
        'call_time' => 'string',
        'call_type' => 'string',
        'callee_name' => 'string',
        'callee_number' => 'string',
        'caller_name' => 'string',
        'caller_number' => 'string',
        'created_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => null,
        'call_duration' => null,
        'call_id' => null,
        'call_time' => null,
        'call_type' => null,
        'callee_name' => null,
        'callee_number' => null,
        'caller_name' => null,
        'caller_number' => null,
        'created_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_id' => false,
        'call_duration' => false,
        'call_id' => false,
        'call_time' => false,
        'call_type' => false,
        'callee_name' => false,
        'callee_number' => false,
        'caller_name' => false,
        'caller_number' => false,
        'created_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account_id',
        'call_duration' => 'call_duration',
        'call_id' => 'call_id',
        'call_time' => 'call_time',
        'call_type' => 'call_type',
        'callee_name' => 'callee_name',
        'callee_number' => 'callee_number',
        'caller_name' => 'caller_name',
        'caller_number' => 'caller_number',
        'created_at' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'call_duration' => 'setCallDuration',
        'call_id' => 'setCallId',
        'call_time' => 'setCallTime',
        'call_type' => 'setCallType',
        'callee_name' => 'setCalleeName',
        'callee_number' => 'setCalleeNumber',
        'caller_name' => 'setCallerName',
        'caller_number' => 'setCallerNumber',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'call_duration' => 'getCallDuration',
        'call_id' => 'getCallId',
        'call_time' => 'getCallTime',
        'call_type' => 'getCallType',
        'callee_name' => 'getCalleeName',
        'callee_number' => 'getCalleeNumber',
        'caller_name' => 'getCallerName',
        'caller_number' => 'getCallerNumber',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('call_duration', $data ?? [], null);
        $this->setIfExists('call_id', $data ?? [], null);
        $this->setIfExists('call_time', $data ?? [], null);
        $this->setIfExists('call_type', $data ?? [], null);
        $this->setIfExists('callee_name', $data ?? [], null);
        $this->setIfExists('callee_number', $data ?? [], null);
        $this->setIfExists('caller_name', $data ?? [], null);
        $this->setIfExists('caller_number', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets call_duration
     *
     * @return string|null
     */
    public function getCallDuration()
    {
        return $this->container['call_duration'];
    }

    /**
     * Sets call_duration
     *
     * @param string|null $call_duration call_duration
     *
     * @return self
     */
    public function setCallDuration($call_duration)
    {
        if (is_null($call_duration)) {
            throw new \InvalidArgumentException('non-nullable call_duration cannot be null');
        }
        $this->container['call_duration'] = $call_duration;

        return $this;
    }

    /**
     * Gets call_id
     *
     * @return string|null
     */
    public function getCallId()
    {
        return $this->container['call_id'];
    }

    /**
     * Sets call_id
     *
     * @param string|null $call_id call_id
     *
     * @return self
     */
    public function setCallId($call_id)
    {
        if (is_null($call_id)) {
            throw new \InvalidArgumentException('non-nullable call_id cannot be null');
        }
        $this->container['call_id'] = $call_id;

        return $this;
    }

    /**
     * Gets call_time
     *
     * @return string|null
     */
    public function getCallTime()
    {
        return $this->container['call_time'];
    }

    /**
     * Sets call_time
     *
     * @param string|null $call_time call_time
     *
     * @return self
     */
    public function setCallTime($call_time)
    {
        if (is_null($call_time)) {
            throw new \InvalidArgumentException('non-nullable call_time cannot be null');
        }
        $this->container['call_time'] = $call_time;

        return $this;
    }

    /**
     * Gets call_type
     *
     * @return string|null
     */
    public function getCallType()
    {
        return $this->container['call_type'];
    }

    /**
     * Sets call_type
     *
     * @param string|null $call_type call_type
     *
     * @return self
     */
    public function setCallType($call_type)
    {
        if (is_null($call_type)) {
            throw new \InvalidArgumentException('non-nullable call_type cannot be null');
        }
        $this->container['call_type'] = $call_type;

        return $this;
    }

    /**
     * Gets callee_name
     *
     * @return string|null
     */
    public function getCalleeName()
    {
        return $this->container['callee_name'];
    }

    /**
     * Sets callee_name
     *
     * @param string|null $callee_name callee_name
     *
     * @return self
     */
    public function setCalleeName($callee_name)
    {
        if (is_null($callee_name)) {
            throw new \InvalidArgumentException('non-nullable callee_name cannot be null');
        }
        $this->container['callee_name'] = $callee_name;

        return $this;
    }

    /**
     * Gets callee_number
     *
     * @return string|null
     */
    public function getCalleeNumber()
    {
        return $this->container['callee_number'];
    }

    /**
     * Sets callee_number
     *
     * @param string|null $callee_number callee_number
     *
     * @return self
     */
    public function setCalleeNumber($callee_number)
    {
        if (is_null($callee_number)) {
            throw new \InvalidArgumentException('non-nullable callee_number cannot be null');
        }
        $this->container['callee_number'] = $callee_number;

        return $this;
    }

    /**
     * Gets caller_name
     *
     * @return string|null
     */
    public function getCallerName()
    {
        return $this->container['caller_name'];
    }

    /**
     * Sets caller_name
     *
     * @param string|null $caller_name caller_name
     *
     * @return self
     */
    public function setCallerName($caller_name)
    {
        if (is_null($caller_name)) {
            throw new \InvalidArgumentException('non-nullable caller_name cannot be null');
        }
        $this->container['caller_name'] = $caller_name;

        return $this;
    }

    /**
     * Gets caller_number
     *
     * @return string|null
     */
    public function getCallerNumber()
    {
        return $this->container['caller_number'];
    }

    /**
     * Sets caller_number
     *
     * @param string|null $caller_number caller_number
     *
     * @return self
     */
    public function setCallerNumber($caller_number)
    {
        if (is_null($caller_number)) {
            throw new \InvalidArgumentException('non-nullable caller_number cannot be null');
        }
        $this->container['caller_number'] = $caller_number;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


