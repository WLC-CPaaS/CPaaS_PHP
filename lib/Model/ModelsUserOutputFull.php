<?php
/**
 * ModelsUserOutputFull
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModelsUserOutputFull Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModelsUserOutputFull implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'models.UserOutputFull';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'call_forward' => '\OpenAPI\Client\Model\ModelsCallForward',
        'call_recording' => '\OpenAPI\Client\Model\ModelsCallRecordingSettings',
        'caller_id' => '\OpenAPI\Client\Model\ModelsUserOutputFullCallerid',
        'do_not_disturb' => '\OpenAPI\Client\Model\ModelsVOIPSharedDoNotDisturb',
        'email' => 'string',
        'enabled' => 'bool',
        'first_name' => 'string',
        'id' => 'string',
        'last_name' => 'string',
        'music_on_hold' => '\OpenAPI\Client\Model\ModelsMusicOnHold',
        'presence_id' => 'string',
        'timezone' => 'string',
        'verified' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'call_forward' => null,
        'call_recording' => null,
        'caller_id' => null,
        'do_not_disturb' => null,
        'email' => null,
        'enabled' => null,
        'first_name' => null,
        'id' => null,
        'last_name' => null,
        'music_on_hold' => null,
        'presence_id' => null,
        'timezone' => null,
        'verified' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'call_forward' => false,
        'call_recording' => false,
        'caller_id' => false,
        'do_not_disturb' => false,
        'email' => false,
        'enabled' => false,
        'first_name' => false,
        'id' => false,
        'last_name' => false,
        'music_on_hold' => false,
        'presence_id' => false,
        'timezone' => false,
        'verified' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'call_forward' => 'call_forward',
        'call_recording' => 'call_recording',
        'caller_id' => 'caller_id',
        'do_not_disturb' => 'do_not_disturb',
        'email' => 'email',
        'enabled' => 'enabled',
        'first_name' => 'first_name',
        'id' => 'id',
        'last_name' => 'last_name',
        'music_on_hold' => 'music_on_hold',
        'presence_id' => 'presence_id',
        'timezone' => 'timezone',
        'verified' => 'verified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'call_forward' => 'setCallForward',
        'call_recording' => 'setCallRecording',
        'caller_id' => 'setCallerId',
        'do_not_disturb' => 'setDoNotDisturb',
        'email' => 'setEmail',
        'enabled' => 'setEnabled',
        'first_name' => 'setFirstName',
        'id' => 'setId',
        'last_name' => 'setLastName',
        'music_on_hold' => 'setMusicOnHold',
        'presence_id' => 'setPresenceId',
        'timezone' => 'setTimezone',
        'verified' => 'setVerified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'call_forward' => 'getCallForward',
        'call_recording' => 'getCallRecording',
        'caller_id' => 'getCallerId',
        'do_not_disturb' => 'getDoNotDisturb',
        'email' => 'getEmail',
        'enabled' => 'getEnabled',
        'first_name' => 'getFirstName',
        'id' => 'getId',
        'last_name' => 'getLastName',
        'music_on_hold' => 'getMusicOnHold',
        'presence_id' => 'getPresenceId',
        'timezone' => 'getTimezone',
        'verified' => 'getVerified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('call_forward', $data ?? [], null);
        $this->setIfExists('call_recording', $data ?? [], null);
        $this->setIfExists('caller_id', $data ?? [], null);
        $this->setIfExists('do_not_disturb', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('music_on_hold', $data ?? [], null);
        $this->setIfExists('presence_id', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('verified', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets call_forward
     *
     * @return \OpenAPI\Client\Model\ModelsCallForward|null
     */
    public function getCallForward()
    {
        return $this->container['call_forward'];
    }

    /**
     * Sets call_forward
     *
     * @param \OpenAPI\Client\Model\ModelsCallForward|null $call_forward call_forward
     *
     * @return self
     */
    public function setCallForward($call_forward)
    {
        if (is_null($call_forward)) {
            throw new \InvalidArgumentException('non-nullable call_forward cannot be null');
        }
        $this->container['call_forward'] = $call_forward;

        return $this;
    }

    /**
     * Gets call_recording
     *
     * @return \OpenAPI\Client\Model\ModelsCallRecordingSettings|null
     */
    public function getCallRecording()
    {
        return $this->container['call_recording'];
    }

    /**
     * Sets call_recording
     *
     * @param \OpenAPI\Client\Model\ModelsCallRecordingSettings|null $call_recording call_recording
     *
     * @return self
     */
    public function setCallRecording($call_recording)
    {
        if (is_null($call_recording)) {
            throw new \InvalidArgumentException('non-nullable call_recording cannot be null');
        }
        $this->container['call_recording'] = $call_recording;

        return $this;
    }

    /**
     * Gets caller_id
     *
     * @return \OpenAPI\Client\Model\ModelsUserOutputFullCallerid|null
     */
    public function getCallerId()
    {
        return $this->container['caller_id'];
    }

    /**
     * Sets caller_id
     *
     * @param \OpenAPI\Client\Model\ModelsUserOutputFullCallerid|null $caller_id caller_id
     *
     * @return self
     */
    public function setCallerId($caller_id)
    {
        if (is_null($caller_id)) {
            throw new \InvalidArgumentException('non-nullable caller_id cannot be null');
        }
        $this->container['caller_id'] = $caller_id;

        return $this;
    }

    /**
     * Gets do_not_disturb
     *
     * @return \OpenAPI\Client\Model\ModelsVOIPSharedDoNotDisturb|null
     */
    public function getDoNotDisturb()
    {
        return $this->container['do_not_disturb'];
    }

    /**
     * Sets do_not_disturb
     *
     * @param \OpenAPI\Client\Model\ModelsVOIPSharedDoNotDisturb|null $do_not_disturb do_not_disturb
     *
     * @return self
     */
    public function setDoNotDisturb($do_not_disturb)
    {
        if (is_null($do_not_disturb)) {
            throw new \InvalidArgumentException('non-nullable do_not_disturb cannot be null');
        }
        $this->container['do_not_disturb'] = $do_not_disturb;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets music_on_hold
     *
     * @return \OpenAPI\Client\Model\ModelsMusicOnHold|null
     */
    public function getMusicOnHold()
    {
        return $this->container['music_on_hold'];
    }

    /**
     * Sets music_on_hold
     *
     * @param \OpenAPI\Client\Model\ModelsMusicOnHold|null $music_on_hold music_on_hold
     *
     * @return self
     */
    public function setMusicOnHold($music_on_hold)
    {
        if (is_null($music_on_hold)) {
            throw new \InvalidArgumentException('non-nullable music_on_hold cannot be null');
        }
        $this->container['music_on_hold'] = $music_on_hold;

        return $this;
    }

    /**
     * Gets presence_id
     *
     * @return string|null
     */
    public function getPresenceId()
    {
        return $this->container['presence_id'];
    }

    /**
     * Sets presence_id
     *
     * @param string|null $presence_id presence_id
     *
     * @return self
     */
    public function setPresenceId($presence_id)
    {
        if (is_null($presence_id)) {
            throw new \InvalidArgumentException('non-nullable presence_id cannot be null');
        }
        $this->container['presence_id'] = $presence_id;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool|null
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool|null $verified verified
     *
     * @return self
     */
    public function setVerified($verified)
    {
        if (is_null($verified)) {
            throw new \InvalidArgumentException('non-nullable verified cannot be null');
        }
        $this->container['verified'] = $verified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


