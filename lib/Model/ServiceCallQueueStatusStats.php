<?php
/**
 * ServiceCallQueueStatusStats
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ServiceCallQueueStatusStats Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServiceCallQueueStatusStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'service.CallQueueStatusStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'abandoned_sessions' => 'int',
        'active_session_count' => 'int',
        'average_wait' => 'int',
        'estimated_wait' => 'int',
        'longest_wait' => 'int',
        'missed_sessions' => 'int',
        'recipient_count' => 'int',
        'total_sessions' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'abandoned_sessions' => null,
        'active_session_count' => null,
        'average_wait' => null,
        'estimated_wait' => null,
        'longest_wait' => null,
        'missed_sessions' => null,
        'recipient_count' => null,
        'total_sessions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'abandoned_sessions' => false,
        'active_session_count' => false,
        'average_wait' => false,
        'estimated_wait' => false,
        'longest_wait' => false,
        'missed_sessions' => false,
        'recipient_count' => false,
        'total_sessions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abandoned_sessions' => 'abandoned_sessions',
        'active_session_count' => 'active_session_count',
        'average_wait' => 'average_wait',
        'estimated_wait' => 'estimated_wait',
        'longest_wait' => 'longest_wait',
        'missed_sessions' => 'missed_sessions',
        'recipient_count' => 'recipient_count',
        'total_sessions' => 'total_sessions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abandoned_sessions' => 'setAbandonedSessions',
        'active_session_count' => 'setActiveSessionCount',
        'average_wait' => 'setAverageWait',
        'estimated_wait' => 'setEstimatedWait',
        'longest_wait' => 'setLongestWait',
        'missed_sessions' => 'setMissedSessions',
        'recipient_count' => 'setRecipientCount',
        'total_sessions' => 'setTotalSessions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abandoned_sessions' => 'getAbandonedSessions',
        'active_session_count' => 'getActiveSessionCount',
        'average_wait' => 'getAverageWait',
        'estimated_wait' => 'getEstimatedWait',
        'longest_wait' => 'getLongestWait',
        'missed_sessions' => 'getMissedSessions',
        'recipient_count' => 'getRecipientCount',
        'total_sessions' => 'getTotalSessions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('abandoned_sessions', $data ?? [], null);
        $this->setIfExists('active_session_count', $data ?? [], null);
        $this->setIfExists('average_wait', $data ?? [], null);
        $this->setIfExists('estimated_wait', $data ?? [], null);
        $this->setIfExists('longest_wait', $data ?? [], null);
        $this->setIfExists('missed_sessions', $data ?? [], null);
        $this->setIfExists('recipient_count', $data ?? [], null);
        $this->setIfExists('total_sessions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abandoned_sessions
     *
     * @return int|null
     */
    public function getAbandonedSessions()
    {
        return $this->container['abandoned_sessions'];
    }

    /**
     * Sets abandoned_sessions
     *
     * @param int|null $abandoned_sessions abandoned_sessions
     *
     * @return self
     */
    public function setAbandonedSessions($abandoned_sessions)
    {
        if (is_null($abandoned_sessions)) {
            throw new \InvalidArgumentException('non-nullable abandoned_sessions cannot be null');
        }
        $this->container['abandoned_sessions'] = $abandoned_sessions;

        return $this;
    }

    /**
     * Gets active_session_count
     *
     * @return int|null
     */
    public function getActiveSessionCount()
    {
        return $this->container['active_session_count'];
    }

    /**
     * Sets active_session_count
     *
     * @param int|null $active_session_count active_session_count
     *
     * @return self
     */
    public function setActiveSessionCount($active_session_count)
    {
        if (is_null($active_session_count)) {
            throw new \InvalidArgumentException('non-nullable active_session_count cannot be null');
        }
        $this->container['active_session_count'] = $active_session_count;

        return $this;
    }

    /**
     * Gets average_wait
     *
     * @return int|null
     */
    public function getAverageWait()
    {
        return $this->container['average_wait'];
    }

    /**
     * Sets average_wait
     *
     * @param int|null $average_wait average_wait
     *
     * @return self
     */
    public function setAverageWait($average_wait)
    {
        if (is_null($average_wait)) {
            throw new \InvalidArgumentException('non-nullable average_wait cannot be null');
        }
        $this->container['average_wait'] = $average_wait;

        return $this;
    }

    /**
     * Gets estimated_wait
     *
     * @return int|null
     */
    public function getEstimatedWait()
    {
        return $this->container['estimated_wait'];
    }

    /**
     * Sets estimated_wait
     *
     * @param int|null $estimated_wait estimated_wait
     *
     * @return self
     */
    public function setEstimatedWait($estimated_wait)
    {
        if (is_null($estimated_wait)) {
            throw new \InvalidArgumentException('non-nullable estimated_wait cannot be null');
        }
        $this->container['estimated_wait'] = $estimated_wait;

        return $this;
    }

    /**
     * Gets longest_wait
     *
     * @return int|null
     */
    public function getLongestWait()
    {
        return $this->container['longest_wait'];
    }

    /**
     * Sets longest_wait
     *
     * @param int|null $longest_wait longest_wait
     *
     * @return self
     */
    public function setLongestWait($longest_wait)
    {
        if (is_null($longest_wait)) {
            throw new \InvalidArgumentException('non-nullable longest_wait cannot be null');
        }
        $this->container['longest_wait'] = $longest_wait;

        return $this;
    }

    /**
     * Gets missed_sessions
     *
     * @return int|null
     */
    public function getMissedSessions()
    {
        return $this->container['missed_sessions'];
    }

    /**
     * Sets missed_sessions
     *
     * @param int|null $missed_sessions missed_sessions
     *
     * @return self
     */
    public function setMissedSessions($missed_sessions)
    {
        if (is_null($missed_sessions)) {
            throw new \InvalidArgumentException('non-nullable missed_sessions cannot be null');
        }
        $this->container['missed_sessions'] = $missed_sessions;

        return $this;
    }

    /**
     * Gets recipient_count
     *
     * @return int|null
     */
    public function getRecipientCount()
    {
        return $this->container['recipient_count'];
    }

    /**
     * Sets recipient_count
     *
     * @param int|null $recipient_count recipient_count
     *
     * @return self
     */
    public function setRecipientCount($recipient_count)
    {
        if (is_null($recipient_count)) {
            throw new \InvalidArgumentException('non-nullable recipient_count cannot be null');
        }
        $this->container['recipient_count'] = $recipient_count;

        return $this;
    }

    /**
     * Gets total_sessions
     *
     * @return int|null
     */
    public function getTotalSessions()
    {
        return $this->container['total_sessions'];
    }

    /**
     * Sets total_sessions
     *
     * @param int|null $total_sessions total_sessions
     *
     * @return self
     */
    public function setTotalSessions($total_sessions)
    {
        if (is_null($total_sessions)) {
            throw new \InvalidArgumentException('non-nullable total_sessions cannot be null');
        }
        $this->container['total_sessions'] = $total_sessions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


