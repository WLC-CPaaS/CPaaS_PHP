<?php
/**
 * ServiceChannelOutput
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ServiceChannelOutput Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServiceChannelOutput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'service.ChannelOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'answered' => 'bool',
        'authorizing_id' => 'string',
        'authorizing_type' => 'string',
        'callflow_id' => 'string',
        'channel_authorized' => 'bool',
        'custom_application_vars' => 'array<string,mixed>',
        'custom_auth_headers' => 'array<string,mixed>',
        'custom_channel_vars' => 'array<string,mixed>',
        'custom_sip_headers' => 'array<string,mixed>',
        'destination' => 'string',
        'direction' => 'string',
        'elapsed_s' => 'int',
        'from_tag' => 'string',
        'interaction_id' => 'string',
        'is_loopback' => 'bool',
        'is_onhold' => 'bool',
        'other_leg' => 'string',
        'owner_id' => 'string',
        'presence_id' => 'string',
        'request' => 'string',
        'reseller_id' => 'string',
        'timestamp' => 'int',
        'to_tag' => 'string',
        'username' => 'string',
        'uuid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'answered' => null,
        'authorizing_id' => null,
        'authorizing_type' => null,
        'callflow_id' => null,
        'channel_authorized' => null,
        'custom_application_vars' => null,
        'custom_auth_headers' => null,
        'custom_channel_vars' => null,
        'custom_sip_headers' => null,
        'destination' => null,
        'direction' => null,
        'elapsed_s' => null,
        'from_tag' => null,
        'interaction_id' => null,
        'is_loopback' => null,
        'is_onhold' => null,
        'other_leg' => null,
        'owner_id' => null,
        'presence_id' => null,
        'request' => null,
        'reseller_id' => null,
        'timestamp' => null,
        'to_tag' => null,
        'username' => null,
        'uuid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'answered' => false,
        'authorizing_id' => false,
        'authorizing_type' => false,
        'callflow_id' => false,
        'channel_authorized' => false,
        'custom_application_vars' => false,
        'custom_auth_headers' => false,
        'custom_channel_vars' => false,
        'custom_sip_headers' => false,
        'destination' => false,
        'direction' => false,
        'elapsed_s' => false,
        'from_tag' => false,
        'interaction_id' => false,
        'is_loopback' => false,
        'is_onhold' => false,
        'other_leg' => false,
        'owner_id' => false,
        'presence_id' => false,
        'request' => false,
        'reseller_id' => false,
        'timestamp' => false,
        'to_tag' => false,
        'username' => false,
        'uuid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'answered' => 'answered',
        'authorizing_id' => 'authorizing_id',
        'authorizing_type' => 'authorizing_type',
        'callflow_id' => 'callflow_id',
        'channel_authorized' => 'channel_authorized',
        'custom_application_vars' => 'custom_application_vars',
        'custom_auth_headers' => 'custom_auth_headers',
        'custom_channel_vars' => 'custom_channel_vars',
        'custom_sip_headers' => 'custom_sip_headers',
        'destination' => 'destination',
        'direction' => 'direction',
        'elapsed_s' => 'elapsed_s',
        'from_tag' => 'from_tag',
        'interaction_id' => 'interaction_id',
        'is_loopback' => 'is_loopback',
        'is_onhold' => 'is_onhold',
        'other_leg' => 'other_leg',
        'owner_id' => 'owner_id',
        'presence_id' => 'presence_id',
        'request' => 'request',
        'reseller_id' => 'reseller_id',
        'timestamp' => 'timestamp',
        'to_tag' => 'to_tag',
        'username' => 'username',
        'uuid' => 'uuid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'answered' => 'setAnswered',
        'authorizing_id' => 'setAuthorizingId',
        'authorizing_type' => 'setAuthorizingType',
        'callflow_id' => 'setCallflowId',
        'channel_authorized' => 'setChannelAuthorized',
        'custom_application_vars' => 'setCustomApplicationVars',
        'custom_auth_headers' => 'setCustomAuthHeaders',
        'custom_channel_vars' => 'setCustomChannelVars',
        'custom_sip_headers' => 'setCustomSipHeaders',
        'destination' => 'setDestination',
        'direction' => 'setDirection',
        'elapsed_s' => 'setElapsedS',
        'from_tag' => 'setFromTag',
        'interaction_id' => 'setInteractionId',
        'is_loopback' => 'setIsLoopback',
        'is_onhold' => 'setIsOnhold',
        'other_leg' => 'setOtherLeg',
        'owner_id' => 'setOwnerId',
        'presence_id' => 'setPresenceId',
        'request' => 'setRequest',
        'reseller_id' => 'setResellerId',
        'timestamp' => 'setTimestamp',
        'to_tag' => 'setToTag',
        'username' => 'setUsername',
        'uuid' => 'setUuid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'answered' => 'getAnswered',
        'authorizing_id' => 'getAuthorizingId',
        'authorizing_type' => 'getAuthorizingType',
        'callflow_id' => 'getCallflowId',
        'channel_authorized' => 'getChannelAuthorized',
        'custom_application_vars' => 'getCustomApplicationVars',
        'custom_auth_headers' => 'getCustomAuthHeaders',
        'custom_channel_vars' => 'getCustomChannelVars',
        'custom_sip_headers' => 'getCustomSipHeaders',
        'destination' => 'getDestination',
        'direction' => 'getDirection',
        'elapsed_s' => 'getElapsedS',
        'from_tag' => 'getFromTag',
        'interaction_id' => 'getInteractionId',
        'is_loopback' => 'getIsLoopback',
        'is_onhold' => 'getIsOnhold',
        'other_leg' => 'getOtherLeg',
        'owner_id' => 'getOwnerId',
        'presence_id' => 'getPresenceId',
        'request' => 'getRequest',
        'reseller_id' => 'getResellerId',
        'timestamp' => 'getTimestamp',
        'to_tag' => 'getToTag',
        'username' => 'getUsername',
        'uuid' => 'getUuid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('answered', $data ?? [], null);
        $this->setIfExists('authorizing_id', $data ?? [], null);
        $this->setIfExists('authorizing_type', $data ?? [], null);
        $this->setIfExists('callflow_id', $data ?? [], null);
        $this->setIfExists('channel_authorized', $data ?? [], null);
        $this->setIfExists('custom_application_vars', $data ?? [], null);
        $this->setIfExists('custom_auth_headers', $data ?? [], null);
        $this->setIfExists('custom_channel_vars', $data ?? [], null);
        $this->setIfExists('custom_sip_headers', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('direction', $data ?? [], null);
        $this->setIfExists('elapsed_s', $data ?? [], null);
        $this->setIfExists('from_tag', $data ?? [], null);
        $this->setIfExists('interaction_id', $data ?? [], null);
        $this->setIfExists('is_loopback', $data ?? [], null);
        $this->setIfExists('is_onhold', $data ?? [], null);
        $this->setIfExists('other_leg', $data ?? [], null);
        $this->setIfExists('owner_id', $data ?? [], null);
        $this->setIfExists('presence_id', $data ?? [], null);
        $this->setIfExists('request', $data ?? [], null);
        $this->setIfExists('reseller_id', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('to_tag', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets answered
     *
     * @return bool|null
     */
    public function getAnswered()
    {
        return $this->container['answered'];
    }

    /**
     * Sets answered
     *
     * @param bool|null $answered answered
     *
     * @return self
     */
    public function setAnswered($answered)
    {
        if (is_null($answered)) {
            throw new \InvalidArgumentException('non-nullable answered cannot be null');
        }
        $this->container['answered'] = $answered;

        return $this;
    }

    /**
     * Gets authorizing_id
     *
     * @return string|null
     */
    public function getAuthorizingId()
    {
        return $this->container['authorizing_id'];
    }

    /**
     * Sets authorizing_id
     *
     * @param string|null $authorizing_id authorizing_id
     *
     * @return self
     */
    public function setAuthorizingId($authorizing_id)
    {
        if (is_null($authorizing_id)) {
            throw new \InvalidArgumentException('non-nullable authorizing_id cannot be null');
        }
        $this->container['authorizing_id'] = $authorizing_id;

        return $this;
    }

    /**
     * Gets authorizing_type
     *
     * @return string|null
     */
    public function getAuthorizingType()
    {
        return $this->container['authorizing_type'];
    }

    /**
     * Sets authorizing_type
     *
     * @param string|null $authorizing_type authorizing_type
     *
     * @return self
     */
    public function setAuthorizingType($authorizing_type)
    {
        if (is_null($authorizing_type)) {
            throw new \InvalidArgumentException('non-nullable authorizing_type cannot be null');
        }
        $this->container['authorizing_type'] = $authorizing_type;

        return $this;
    }

    /**
     * Gets callflow_id
     *
     * @return string|null
     */
    public function getCallflowId()
    {
        return $this->container['callflow_id'];
    }

    /**
     * Sets callflow_id
     *
     * @param string|null $callflow_id callflow_id
     *
     * @return self
     */
    public function setCallflowId($callflow_id)
    {
        if (is_null($callflow_id)) {
            throw new \InvalidArgumentException('non-nullable callflow_id cannot be null');
        }
        $this->container['callflow_id'] = $callflow_id;

        return $this;
    }

    /**
     * Gets channel_authorized
     *
     * @return bool|null
     */
    public function getChannelAuthorized()
    {
        return $this->container['channel_authorized'];
    }

    /**
     * Sets channel_authorized
     *
     * @param bool|null $channel_authorized channel_authorized
     *
     * @return self
     */
    public function setChannelAuthorized($channel_authorized)
    {
        if (is_null($channel_authorized)) {
            throw new \InvalidArgumentException('non-nullable channel_authorized cannot be null');
        }
        $this->container['channel_authorized'] = $channel_authorized;

        return $this;
    }

    /**
     * Gets custom_application_vars
     *
     * @return array<string,mixed>|null
     */
    public function getCustomApplicationVars()
    {
        return $this->container['custom_application_vars'];
    }

    /**
     * Sets custom_application_vars
     *
     * @param array<string,mixed>|null $custom_application_vars custom_application_vars
     *
     * @return self
     */
    public function setCustomApplicationVars($custom_application_vars)
    {
        if (is_null($custom_application_vars)) {
            throw new \InvalidArgumentException('non-nullable custom_application_vars cannot be null');
        }
        $this->container['custom_application_vars'] = $custom_application_vars;

        return $this;
    }

    /**
     * Gets custom_auth_headers
     *
     * @return array<string,mixed>|null
     */
    public function getCustomAuthHeaders()
    {
        return $this->container['custom_auth_headers'];
    }

    /**
     * Sets custom_auth_headers
     *
     * @param array<string,mixed>|null $custom_auth_headers custom_auth_headers
     *
     * @return self
     */
    public function setCustomAuthHeaders($custom_auth_headers)
    {
        if (is_null($custom_auth_headers)) {
            throw new \InvalidArgumentException('non-nullable custom_auth_headers cannot be null');
        }
        $this->container['custom_auth_headers'] = $custom_auth_headers;

        return $this;
    }

    /**
     * Gets custom_channel_vars
     *
     * @return array<string,mixed>|null
     */
    public function getCustomChannelVars()
    {
        return $this->container['custom_channel_vars'];
    }

    /**
     * Sets custom_channel_vars
     *
     * @param array<string,mixed>|null $custom_channel_vars custom_channel_vars
     *
     * @return self
     */
    public function setCustomChannelVars($custom_channel_vars)
    {
        if (is_null($custom_channel_vars)) {
            throw new \InvalidArgumentException('non-nullable custom_channel_vars cannot be null');
        }
        $this->container['custom_channel_vars'] = $custom_channel_vars;

        return $this;
    }

    /**
     * Gets custom_sip_headers
     *
     * @return array<string,mixed>|null
     */
    public function getCustomSipHeaders()
    {
        return $this->container['custom_sip_headers'];
    }

    /**
     * Sets custom_sip_headers
     *
     * @param array<string,mixed>|null $custom_sip_headers custom_sip_headers
     *
     * @return self
     */
    public function setCustomSipHeaders($custom_sip_headers)
    {
        if (is_null($custom_sip_headers)) {
            throw new \InvalidArgumentException('non-nullable custom_sip_headers cannot be null');
        }
        $this->container['custom_sip_headers'] = $custom_sip_headers;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return string|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param string|null $destination destination
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            throw new \InvalidArgumentException('non-nullable destination cannot be null');
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string|null
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string|null $direction direction
     *
     * @return self
     */
    public function setDirection($direction)
    {
        if (is_null($direction)) {
            throw new \InvalidArgumentException('non-nullable direction cannot be null');
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets elapsed_s
     *
     * @return int|null
     */
    public function getElapsedS()
    {
        return $this->container['elapsed_s'];
    }

    /**
     * Sets elapsed_s
     *
     * @param int|null $elapsed_s elapsed_s
     *
     * @return self
     */
    public function setElapsedS($elapsed_s)
    {
        if (is_null($elapsed_s)) {
            throw new \InvalidArgumentException('non-nullable elapsed_s cannot be null');
        }
        $this->container['elapsed_s'] = $elapsed_s;

        return $this;
    }

    /**
     * Gets from_tag
     *
     * @return string|null
     */
    public function getFromTag()
    {
        return $this->container['from_tag'];
    }

    /**
     * Sets from_tag
     *
     * @param string|null $from_tag from_tag
     *
     * @return self
     */
    public function setFromTag($from_tag)
    {
        if (is_null($from_tag)) {
            throw new \InvalidArgumentException('non-nullable from_tag cannot be null');
        }
        $this->container['from_tag'] = $from_tag;

        return $this;
    }

    /**
     * Gets interaction_id
     *
     * @return string|null
     */
    public function getInteractionId()
    {
        return $this->container['interaction_id'];
    }

    /**
     * Sets interaction_id
     *
     * @param string|null $interaction_id interaction_id
     *
     * @return self
     */
    public function setInteractionId($interaction_id)
    {
        if (is_null($interaction_id)) {
            throw new \InvalidArgumentException('non-nullable interaction_id cannot be null');
        }
        $this->container['interaction_id'] = $interaction_id;

        return $this;
    }

    /**
     * Gets is_loopback
     *
     * @return bool|null
     */
    public function getIsLoopback()
    {
        return $this->container['is_loopback'];
    }

    /**
     * Sets is_loopback
     *
     * @param bool|null $is_loopback is_loopback
     *
     * @return self
     */
    public function setIsLoopback($is_loopback)
    {
        if (is_null($is_loopback)) {
            throw new \InvalidArgumentException('non-nullable is_loopback cannot be null');
        }
        $this->container['is_loopback'] = $is_loopback;

        return $this;
    }

    /**
     * Gets is_onhold
     *
     * @return bool|null
     */
    public function getIsOnhold()
    {
        return $this->container['is_onhold'];
    }

    /**
     * Sets is_onhold
     *
     * @param bool|null $is_onhold is_onhold
     *
     * @return self
     */
    public function setIsOnhold($is_onhold)
    {
        if (is_null($is_onhold)) {
            throw new \InvalidArgumentException('non-nullable is_onhold cannot be null');
        }
        $this->container['is_onhold'] = $is_onhold;

        return $this;
    }

    /**
     * Gets other_leg
     *
     * @return string|null
     */
    public function getOtherLeg()
    {
        return $this->container['other_leg'];
    }

    /**
     * Sets other_leg
     *
     * @param string|null $other_leg other_leg
     *
     * @return self
     */
    public function setOtherLeg($other_leg)
    {
        if (is_null($other_leg)) {
            throw new \InvalidArgumentException('non-nullable other_leg cannot be null');
        }
        $this->container['other_leg'] = $other_leg;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return string|null
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param string|null $owner_id owner_id
     *
     * @return self
     */
    public function setOwnerId($owner_id)
    {
        if (is_null($owner_id)) {
            throw new \InvalidArgumentException('non-nullable owner_id cannot be null');
        }
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets presence_id
     *
     * @return string|null
     */
    public function getPresenceId()
    {
        return $this->container['presence_id'];
    }

    /**
     * Sets presence_id
     *
     * @param string|null $presence_id presence_id
     *
     * @return self
     */
    public function setPresenceId($presence_id)
    {
        if (is_null($presence_id)) {
            throw new \InvalidArgumentException('non-nullable presence_id cannot be null');
        }
        $this->container['presence_id'] = $presence_id;

        return $this;
    }

    /**
     * Gets request
     *
     * @return string|null
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param string|null $request request
     *
     * @return self
     */
    public function setRequest($request)
    {
        if (is_null($request)) {
            throw new \InvalidArgumentException('non-nullable request cannot be null');
        }
        $this->container['request'] = $request;

        return $this;
    }

    /**
     * Gets reseller_id
     *
     * @return string|null
     */
    public function getResellerId()
    {
        return $this->container['reseller_id'];
    }

    /**
     * Sets reseller_id
     *
     * @param string|null $reseller_id reseller_id
     *
     * @return self
     */
    public function setResellerId($reseller_id)
    {
        if (is_null($reseller_id)) {
            throw new \InvalidArgumentException('non-nullable reseller_id cannot be null');
        }
        $this->container['reseller_id'] = $reseller_id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets to_tag
     *
     * @return string|null
     */
    public function getToTag()
    {
        return $this->container['to_tag'];
    }

    /**
     * Sets to_tag
     *
     * @param string|null $to_tag to_tag
     *
     * @return self
     */
    public function setToTag($to_tag)
    {
        if (is_null($to_tag)) {
            throw new \InvalidArgumentException('non-nullable to_tag cannot be null');
        }
        $this->container['to_tag'] = $to_tag;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


