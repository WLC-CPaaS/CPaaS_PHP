<?php
/**
 * ServiceCallRecordingOutput
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ServiceCallRecordingOutput Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServiceCallRecordingOutput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'service.CallRecordingOutput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'call_id' => 'string',
        'callee_id_name' => 'string',
        'callee_id_number' => 'string',
        'caller_id_name' => 'string',
        'caller_id_number' => 'string',
        'cdr_id' => 'string',
        'content_type' => 'string',
        'custom_channel_vars' => 'array<string,mixed>',
        'description' => 'string',
        'direction' => 'string',
        'duration' => 'int',
        'duration_ms' => 'int',
        'endpoint_id' => 'string',
        'from' => 'string',
        'id' => 'string',
        'interaction_id' => 'string',
        'media_source' => 'string',
        'media_type' => 'string',
        'name' => 'string',
        'origin' => 'string',
        'owner_id' => 'string',
        'request' => 'string',
        'source_type' => 'string',
        'start' => 'int',
        'to' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'call_id' => null,
        'callee_id_name' => null,
        'callee_id_number' => null,
        'caller_id_name' => null,
        'caller_id_number' => null,
        'cdr_id' => null,
        'content_type' => null,
        'custom_channel_vars' => null,
        'description' => null,
        'direction' => null,
        'duration' => null,
        'duration_ms' => null,
        'endpoint_id' => null,
        'from' => null,
        'id' => null,
        'interaction_id' => null,
        'media_source' => null,
        'media_type' => null,
        'name' => null,
        'origin' => null,
        'owner_id' => null,
        'request' => null,
        'source_type' => null,
        'start' => null,
        'to' => null,
        'url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'call_id' => false,
        'callee_id_name' => false,
        'callee_id_number' => false,
        'caller_id_name' => false,
        'caller_id_number' => false,
        'cdr_id' => false,
        'content_type' => false,
        'custom_channel_vars' => false,
        'description' => false,
        'direction' => false,
        'duration' => false,
        'duration_ms' => false,
        'endpoint_id' => false,
        'from' => false,
        'id' => false,
        'interaction_id' => false,
        'media_source' => false,
        'media_type' => false,
        'name' => false,
        'origin' => false,
        'owner_id' => false,
        'request' => false,
        'source_type' => false,
        'start' => false,
        'to' => false,
        'url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'call_id' => 'call_id',
        'callee_id_name' => 'callee_id_name',
        'callee_id_number' => 'callee_id_number',
        'caller_id_name' => 'caller_id_name',
        'caller_id_number' => 'caller_id_number',
        'cdr_id' => 'cdr_id',
        'content_type' => 'content_type',
        'custom_channel_vars' => 'custom_channel_vars',
        'description' => 'description',
        'direction' => 'direction',
        'duration' => 'duration',
        'duration_ms' => 'duration_ms',
        'endpoint_id' => 'endpoint_id',
        'from' => 'from',
        'id' => 'id',
        'interaction_id' => 'interaction_id',
        'media_source' => 'media_source',
        'media_type' => 'media_type',
        'name' => 'name',
        'origin' => 'origin',
        'owner_id' => 'owner_id',
        'request' => 'request',
        'source_type' => 'source_type',
        'start' => 'start',
        'to' => 'to',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'call_id' => 'setCallId',
        'callee_id_name' => 'setCalleeIdName',
        'callee_id_number' => 'setCalleeIdNumber',
        'caller_id_name' => 'setCallerIdName',
        'caller_id_number' => 'setCallerIdNumber',
        'cdr_id' => 'setCdrId',
        'content_type' => 'setContentType',
        'custom_channel_vars' => 'setCustomChannelVars',
        'description' => 'setDescription',
        'direction' => 'setDirection',
        'duration' => 'setDuration',
        'duration_ms' => 'setDurationMs',
        'endpoint_id' => 'setEndpointId',
        'from' => 'setFrom',
        'id' => 'setId',
        'interaction_id' => 'setInteractionId',
        'media_source' => 'setMediaSource',
        'media_type' => 'setMediaType',
        'name' => 'setName',
        'origin' => 'setOrigin',
        'owner_id' => 'setOwnerId',
        'request' => 'setRequest',
        'source_type' => 'setSourceType',
        'start' => 'setStart',
        'to' => 'setTo',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'call_id' => 'getCallId',
        'callee_id_name' => 'getCalleeIdName',
        'callee_id_number' => 'getCalleeIdNumber',
        'caller_id_name' => 'getCallerIdName',
        'caller_id_number' => 'getCallerIdNumber',
        'cdr_id' => 'getCdrId',
        'content_type' => 'getContentType',
        'custom_channel_vars' => 'getCustomChannelVars',
        'description' => 'getDescription',
        'direction' => 'getDirection',
        'duration' => 'getDuration',
        'duration_ms' => 'getDurationMs',
        'endpoint_id' => 'getEndpointId',
        'from' => 'getFrom',
        'id' => 'getId',
        'interaction_id' => 'getInteractionId',
        'media_source' => 'getMediaSource',
        'media_type' => 'getMediaType',
        'name' => 'getName',
        'origin' => 'getOrigin',
        'owner_id' => 'getOwnerId',
        'request' => 'getRequest',
        'source_type' => 'getSourceType',
        'start' => 'getStart',
        'to' => 'getTo',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('call_id', $data ?? [], null);
        $this->setIfExists('callee_id_name', $data ?? [], null);
        $this->setIfExists('callee_id_number', $data ?? [], null);
        $this->setIfExists('caller_id_name', $data ?? [], null);
        $this->setIfExists('caller_id_number', $data ?? [], null);
        $this->setIfExists('cdr_id', $data ?? [], null);
        $this->setIfExists('content_type', $data ?? [], null);
        $this->setIfExists('custom_channel_vars', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('direction', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('duration_ms', $data ?? [], null);
        $this->setIfExists('endpoint_id', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('interaction_id', $data ?? [], null);
        $this->setIfExists('media_source', $data ?? [], null);
        $this->setIfExists('media_type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('owner_id', $data ?? [], null);
        $this->setIfExists('request', $data ?? [], null);
        $this->setIfExists('source_type', $data ?? [], null);
        $this->setIfExists('start', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets call_id
     *
     * @return string|null
     */
    public function getCallId()
    {
        return $this->container['call_id'];
    }

    /**
     * Sets call_id
     *
     * @param string|null $call_id call_id
     *
     * @return self
     */
    public function setCallId($call_id)
    {
        if (is_null($call_id)) {
            throw new \InvalidArgumentException('non-nullable call_id cannot be null');
        }
        $this->container['call_id'] = $call_id;

        return $this;
    }

    /**
     * Gets callee_id_name
     *
     * @return string|null
     */
    public function getCalleeIdName()
    {
        return $this->container['callee_id_name'];
    }

    /**
     * Sets callee_id_name
     *
     * @param string|null $callee_id_name callee_id_name
     *
     * @return self
     */
    public function setCalleeIdName($callee_id_name)
    {
        if (is_null($callee_id_name)) {
            throw new \InvalidArgumentException('non-nullable callee_id_name cannot be null');
        }
        $this->container['callee_id_name'] = $callee_id_name;

        return $this;
    }

    /**
     * Gets callee_id_number
     *
     * @return string|null
     */
    public function getCalleeIdNumber()
    {
        return $this->container['callee_id_number'];
    }

    /**
     * Sets callee_id_number
     *
     * @param string|null $callee_id_number callee_id_number
     *
     * @return self
     */
    public function setCalleeIdNumber($callee_id_number)
    {
        if (is_null($callee_id_number)) {
            throw new \InvalidArgumentException('non-nullable callee_id_number cannot be null');
        }
        $this->container['callee_id_number'] = $callee_id_number;

        return $this;
    }

    /**
     * Gets caller_id_name
     *
     * @return string|null
     */
    public function getCallerIdName()
    {
        return $this->container['caller_id_name'];
    }

    /**
     * Sets caller_id_name
     *
     * @param string|null $caller_id_name caller_id_name
     *
     * @return self
     */
    public function setCallerIdName($caller_id_name)
    {
        if (is_null($caller_id_name)) {
            throw new \InvalidArgumentException('non-nullable caller_id_name cannot be null');
        }
        $this->container['caller_id_name'] = $caller_id_name;

        return $this;
    }

    /**
     * Gets caller_id_number
     *
     * @return string|null
     */
    public function getCallerIdNumber()
    {
        return $this->container['caller_id_number'];
    }

    /**
     * Sets caller_id_number
     *
     * @param string|null $caller_id_number caller_id_number
     *
     * @return self
     */
    public function setCallerIdNumber($caller_id_number)
    {
        if (is_null($caller_id_number)) {
            throw new \InvalidArgumentException('non-nullable caller_id_number cannot be null');
        }
        $this->container['caller_id_number'] = $caller_id_number;

        return $this;
    }

    /**
     * Gets cdr_id
     *
     * @return string|null
     */
    public function getCdrId()
    {
        return $this->container['cdr_id'];
    }

    /**
     * Sets cdr_id
     *
     * @param string|null $cdr_id cdr_id
     *
     * @return self
     */
    public function setCdrId($cdr_id)
    {
        if (is_null($cdr_id)) {
            throw new \InvalidArgumentException('non-nullable cdr_id cannot be null');
        }
        $this->container['cdr_id'] = $cdr_id;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string|null
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string|null $content_type content_type
     *
     * @return self
     */
    public function setContentType($content_type)
    {
        if (is_null($content_type)) {
            throw new \InvalidArgumentException('non-nullable content_type cannot be null');
        }
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets custom_channel_vars
     *
     * @return array<string,mixed>|null
     */
    public function getCustomChannelVars()
    {
        return $this->container['custom_channel_vars'];
    }

    /**
     * Sets custom_channel_vars
     *
     * @param array<string,mixed>|null $custom_channel_vars custom_channel_vars
     *
     * @return self
     */
    public function setCustomChannelVars($custom_channel_vars)
    {
        if (is_null($custom_channel_vars)) {
            throw new \InvalidArgumentException('non-nullable custom_channel_vars cannot be null');
        }
        $this->container['custom_channel_vars'] = $custom_channel_vars;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string|null
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string|null $direction direction
     *
     * @return self
     */
    public function setDirection($direction)
    {
        if (is_null($direction)) {
            throw new \InvalidArgumentException('non-nullable direction cannot be null');
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets duration_ms
     *
     * @return int|null
     */
    public function getDurationMs()
    {
        return $this->container['duration_ms'];
    }

    /**
     * Sets duration_ms
     *
     * @param int|null $duration_ms duration_ms
     *
     * @return self
     */
    public function setDurationMs($duration_ms)
    {
        if (is_null($duration_ms)) {
            throw new \InvalidArgumentException('non-nullable duration_ms cannot be null');
        }
        $this->container['duration_ms'] = $duration_ms;

        return $this;
    }

    /**
     * Gets endpoint_id
     *
     * @return string|null
     */
    public function getEndpointId()
    {
        return $this->container['endpoint_id'];
    }

    /**
     * Sets endpoint_id
     *
     * @param string|null $endpoint_id endpoint_id
     *
     * @return self
     */
    public function setEndpointId($endpoint_id)
    {
        if (is_null($endpoint_id)) {
            throw new \InvalidArgumentException('non-nullable endpoint_id cannot be null');
        }
        $this->container['endpoint_id'] = $endpoint_id;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from from
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets interaction_id
     *
     * @return string|null
     */
    public function getInteractionId()
    {
        return $this->container['interaction_id'];
    }

    /**
     * Sets interaction_id
     *
     * @param string|null $interaction_id interaction_id
     *
     * @return self
     */
    public function setInteractionId($interaction_id)
    {
        if (is_null($interaction_id)) {
            throw new \InvalidArgumentException('non-nullable interaction_id cannot be null');
        }
        $this->container['interaction_id'] = $interaction_id;

        return $this;
    }

    /**
     * Gets media_source
     *
     * @return string|null
     */
    public function getMediaSource()
    {
        return $this->container['media_source'];
    }

    /**
     * Sets media_source
     *
     * @param string|null $media_source media_source
     *
     * @return self
     */
    public function setMediaSource($media_source)
    {
        if (is_null($media_source)) {
            throw new \InvalidArgumentException('non-nullable media_source cannot be null');
        }
        $this->container['media_source'] = $media_source;

        return $this;
    }

    /**
     * Gets media_type
     *
     * @return string|null
     */
    public function getMediaType()
    {
        return $this->container['media_type'];
    }

    /**
     * Sets media_type
     *
     * @param string|null $media_type media_type
     *
     * @return self
     */
    public function setMediaType($media_type)
    {
        if (is_null($media_type)) {
            throw new \InvalidArgumentException('non-nullable media_type cannot be null');
        }
        $this->container['media_type'] = $media_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string|null
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string|null $origin origin
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return string|null
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param string|null $owner_id owner_id
     *
     * @return self
     */
    public function setOwnerId($owner_id)
    {
        if (is_null($owner_id)) {
            throw new \InvalidArgumentException('non-nullable owner_id cannot be null');
        }
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets request
     *
     * @return string|null
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param string|null $request request
     *
     * @return self
     */
    public function setRequest($request)
    {
        if (is_null($request)) {
            throw new \InvalidArgumentException('non-nullable request cannot be null');
        }
        $this->container['request'] = $request;

        return $this;
    }

    /**
     * Gets source_type
     *
     * @return string|null
     */
    public function getSourceType()
    {
        return $this->container['source_type'];
    }

    /**
     * Sets source_type
     *
     * @param string|null $source_type source_type
     *
     * @return self
     */
    public function setSourceType($source_type)
    {
        if (is_null($source_type)) {
            throw new \InvalidArgumentException('non-nullable source_type cannot be null');
        }
        $this->container['source_type'] = $source_type;

        return $this;
    }

    /**
     * Gets start
     *
     * @return int|null
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param int|null $start start
     *
     * @return self
     */
    public function setStart($start)
    {
        if (is_null($start)) {
            throw new \InvalidArgumentException('non-nullable start cannot be null');
        }
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to to
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


