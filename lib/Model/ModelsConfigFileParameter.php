<?php
/**
 * ModelsConfigFileParameter
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModelsConfigFileParameter Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModelsConfigFileParameter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'models.ConfigFileParameter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'extension' => 'string',
        'https_host' => 'string',
        'https_password' => 'string',
        'https_username' => 'string',
        'mac_address' => 'string',
        'realm' => 'string',
        'sip_password' => 'string',
        'sip_username' => 'string',
        'timezone' => 'string',
        'voicemail_box_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'extension' => null,
        'https_host' => null,
        'https_password' => null,
        'https_username' => null,
        'mac_address' => null,
        'realm' => null,
        'sip_password' => null,
        'sip_username' => null,
        'timezone' => null,
        'voicemail_box_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'extension' => false,
        'https_host' => false,
        'https_password' => false,
        'https_username' => false,
        'mac_address' => false,
        'realm' => false,
        'sip_password' => false,
        'sip_username' => false,
        'timezone' => false,
        'voicemail_box_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'extension' => 'extension',
        'https_host' => 'https_host',
        'https_password' => 'https_password',
        'https_username' => 'https_username',
        'mac_address' => 'mac_address',
        'realm' => 'realm',
        'sip_password' => 'sip_password',
        'sip_username' => 'sip_username',
        'timezone' => 'timezone',
        'voicemail_box_number' => 'voicemail_box_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'extension' => 'setExtension',
        'https_host' => 'setHttpsHost',
        'https_password' => 'setHttpsPassword',
        'https_username' => 'setHttpsUsername',
        'mac_address' => 'setMacAddress',
        'realm' => 'setRealm',
        'sip_password' => 'setSipPassword',
        'sip_username' => 'setSipUsername',
        'timezone' => 'setTimezone',
        'voicemail_box_number' => 'setVoicemailBoxNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'extension' => 'getExtension',
        'https_host' => 'getHttpsHost',
        'https_password' => 'getHttpsPassword',
        'https_username' => 'getHttpsUsername',
        'mac_address' => 'getMacAddress',
        'realm' => 'getRealm',
        'sip_password' => 'getSipPassword',
        'sip_username' => 'getSipUsername',
        'timezone' => 'getTimezone',
        'voicemail_box_number' => 'getVoicemailBoxNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('extension', $data ?? [], null);
        $this->setIfExists('https_host', $data ?? [], null);
        $this->setIfExists('https_password', $data ?? [], null);
        $this->setIfExists('https_username', $data ?? [], null);
        $this->setIfExists('mac_address', $data ?? [], null);
        $this->setIfExists('realm', $data ?? [], null);
        $this->setIfExists('sip_password', $data ?? [], null);
        $this->setIfExists('sip_username', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('voicemail_box_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets extension
     *
     * @return string|null
     */
    public function getExtension()
    {
        return $this->container['extension'];
    }

    /**
     * Sets extension
     *
     * @param string|null $extension extension
     *
     * @return self
     */
    public function setExtension($extension)
    {
        if (is_null($extension)) {
            throw new \InvalidArgumentException('non-nullable extension cannot be null');
        }
        $this->container['extension'] = $extension;

        return $this;
    }

    /**
     * Gets https_host
     *
     * @return string|null
     */
    public function getHttpsHost()
    {
        return $this->container['https_host'];
    }

    /**
     * Sets https_host
     *
     * @param string|null $https_host https_host
     *
     * @return self
     */
    public function setHttpsHost($https_host)
    {
        if (is_null($https_host)) {
            throw new \InvalidArgumentException('non-nullable https_host cannot be null');
        }
        $this->container['https_host'] = $https_host;

        return $this;
    }

    /**
     * Gets https_password
     *
     * @return string|null
     */
    public function getHttpsPassword()
    {
        return $this->container['https_password'];
    }

    /**
     * Sets https_password
     *
     * @param string|null $https_password https_password
     *
     * @return self
     */
    public function setHttpsPassword($https_password)
    {
        if (is_null($https_password)) {
            throw new \InvalidArgumentException('non-nullable https_password cannot be null');
        }
        $this->container['https_password'] = $https_password;

        return $this;
    }

    /**
     * Gets https_username
     *
     * @return string|null
     */
    public function getHttpsUsername()
    {
        return $this->container['https_username'];
    }

    /**
     * Sets https_username
     *
     * @param string|null $https_username https_username
     *
     * @return self
     */
    public function setHttpsUsername($https_username)
    {
        if (is_null($https_username)) {
            throw new \InvalidArgumentException('non-nullable https_username cannot be null');
        }
        $this->container['https_username'] = $https_username;

        return $this;
    }

    /**
     * Gets mac_address
     *
     * @return string|null
     */
    public function getMacAddress()
    {
        return $this->container['mac_address'];
    }

    /**
     * Sets mac_address
     *
     * @param string|null $mac_address mac_address
     *
     * @return self
     */
    public function setMacAddress($mac_address)
    {
        if (is_null($mac_address)) {
            throw new \InvalidArgumentException('non-nullable mac_address cannot be null');
        }
        $this->container['mac_address'] = $mac_address;

        return $this;
    }

    /**
     * Gets realm
     *
     * @return string|null
     */
    public function getRealm()
    {
        return $this->container['realm'];
    }

    /**
     * Sets realm
     *
     * @param string|null $realm realm
     *
     * @return self
     */
    public function setRealm($realm)
    {
        if (is_null($realm)) {
            throw new \InvalidArgumentException('non-nullable realm cannot be null');
        }
        $this->container['realm'] = $realm;

        return $this;
    }

    /**
     * Gets sip_password
     *
     * @return string|null
     */
    public function getSipPassword()
    {
        return $this->container['sip_password'];
    }

    /**
     * Sets sip_password
     *
     * @param string|null $sip_password sip_password
     *
     * @return self
     */
    public function setSipPassword($sip_password)
    {
        if (is_null($sip_password)) {
            throw new \InvalidArgumentException('non-nullable sip_password cannot be null');
        }
        $this->container['sip_password'] = $sip_password;

        return $this;
    }

    /**
     * Gets sip_username
     *
     * @return string|null
     */
    public function getSipUsername()
    {
        return $this->container['sip_username'];
    }

    /**
     * Sets sip_username
     *
     * @param string|null $sip_username sip_username
     *
     * @return self
     */
    public function setSipUsername($sip_username)
    {
        if (is_null($sip_username)) {
            throw new \InvalidArgumentException('non-nullable sip_username cannot be null');
        }
        $this->container['sip_username'] = $sip_username;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets voicemail_box_number
     *
     * @return string|null
     */
    public function getVoicemailBoxNumber()
    {
        return $this->container['voicemail_box_number'];
    }

    /**
     * Sets voicemail_box_number
     *
     * @param string|null $voicemail_box_number voicemail_box_number
     *
     * @return self
     */
    public function setVoicemailBoxNumber($voicemail_box_number)
    {
        if (is_null($voicemail_box_number)) {
            throw new \InvalidArgumentException('non-nullable voicemail_box_number cannot be null');
        }
        $this->container['voicemail_box_number'] = $voicemail_box_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


