<?php
/**
 * ServiceTTS
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ServiceTTS Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServiceTTS implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'service.TTS';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'text' => 'string',
        'voice' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'text' => null,
        'voice' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'text' => false,
        'voice' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'text' => 'text',
        'voice' => 'voice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'text' => 'setText',
        'voice' => 'setVoice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'text' => 'getText',
        'voice' => 'getVoice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const VOICE_FEMALE_EN_US = 'female/en-US';
    public const VOICE_MALE_EN_US = 'male/en-US';
    public const VOICE_FEMALE_EN_CA = 'female/en-CA';
    public const VOICE_FEMALE_EN_AU = 'female/en-AU';
    public const VOICE_FEMALE_EN_GB = 'female/en-GB';
    public const VOICE_MALE_EN_GB = 'male/en-GB';
    public const VOICE_FEMALE_ES_US = 'female/es-US';
    public const VOICE_MALE_ES_US = 'male/es-US';
    public const VOICE_FEMALE_US_US = 'female/us-US';
    public const VOICE_FEMALE_ZH_CN = 'female/zh-CN';
    public const VOICE_MALE_ZH_CN = 'male/zh-CN';
    public const VOICE_FEMALE_ZH_HK = 'female/zh-HK';
    public const VOICE_FEMALE_ZH_TW = 'female/zh-TW';
    public const VOICE_FEMALE_JA_JP = 'female/ja-JP';
    public const VOICE_MALE_JA_JP = 'male/ja-JP';
    public const VOICE_FEMALE_KO_KR = 'female/ko-KR';
    public const VOICE_MALE_KO_KR = 'male/ko-KR';
    public const VOICE_FEMALE_DA_DK = 'female/da-DK';
    public const VOICE_FEMALE_DE_DE = 'female/de-DE';
    public const VOICE_MALE_DE_DE = 'male/de-DE';
    public const VOICE_FEMALE_CA_ES = 'female/ca-ES';
    public const VOICE_FEMALE_ES_ES = 'female/es-ES';
    public const VOICE_MALE_ES_ES = 'male/es-ES';
    public const VOICE_FEMALE_FI_FI = 'female/fi-FI';
    public const VOICE_FEMALE_FR_CA = 'female/fr-CA';
    public const VOICE_MALE_FR_CA = 'male/fr-CA';
    public const VOICE_FEMALE_FR_FR = 'female/fr-FR';
    public const VOICE_MALE_FR_FR = 'male/fr-FR';
    public const VOICE_FEMALE_IT_IT = 'female/it-IT';
    public const VOICE_MALE_IT_IT = 'male/it-IT';
    public const VOICE_FEMALE_NB_NO = 'female/nb-NO';
    public const VOICE_FEMALE_NL_NL = 'female/nl-NL';
    public const VOICE_FEMALE_PL_PL = 'female/pl-PL';
    public const VOICE_FEMALE_PT_BR = 'female/pt-BR';
    public const VOICE_FEMALE_PT_PT = 'female/pt-PT';
    public const VOICE_MALE_PT_PT = 'male/pt-PT';
    public const VOICE_FEMALE_RU_RU = 'female/ru-RU';
    public const VOICE_MALE_RU_RU = 'male/ru-RU';
    public const VOICE_FEMALE_SV_SE = 'female/sv-SE';
    public const VOICE_FEMALE_HU_HU = 'female/hu-HU';
    public const VOICE_FEMALE_CS_CZ = 'female/cs-CZ';
    public const VOICE_FEMALE_TR_TR = 'female/tr-TR';
    public const VOICE_MALE_TR_TR = 'male/tr-TR';
    public const VOICE_MALE_RU_RU_VLADIMIR = 'male/ru-RU/Vladimir';
    public const VOICE_FEMALE_RU_RU_JULIA = 'female/ru-RU/Julia';
    public const VOICE_FEMALE_RU_RU_ANNA = 'female/ru-RU/Anna';
    public const VOICE_FEMALE_RU_RU_VIKTORIA = 'female/ru-RU/Viktoria';
    public const VOICE_MALE_RU_RU_ALEXANDER = 'male/ru-RU/Alexander';
    public const VOICE_FEMALE_RU_RU_MARIA = 'female/ru-RU/Maria';
    public const VOICE_FEMALE_RU_RU_LIDIA = 'female/ru-RU/Lidia';
    public const VOICE_ES_ES_STANDARD_A = 'es-ES-Standard-A';
    public const VOICE_IT_IT_STANDARD_A = 'it-IT-Standard-A';
    public const VOICE_JA_JP_STANDARD_A = 'ja-JP-Standard-A';
    public const VOICE_KO_KR_STANDARD_A = 'ko-KR-Standard-A';
    public const VOICE_PT_BR_STANDARD_A = 'pt-BR-Standard-A';
    public const VOICE_TR_TR_STANDARD_A = 'tr-TR-Standard-A';
    public const VOICE_SV_SE_STANDARD_A = 'sv-SE-Standard-A';
    public const VOICE_NL_NL_STANDARD_A = 'nl-NL-Standard-A';
    public const VOICE_EN_US_WAVENET_D = 'en-US-Wavenet-D';
    public const VOICE_DE_DE_WAVENET_A = 'de-DE-Wavenet-A';
    public const VOICE_DE_DE_WAVENET_B = 'de-DE-Wavenet-B';
    public const VOICE_DE_DE_WAVENET_C = 'de-DE-Wavenet-C';
    public const VOICE_DE_DE_WAVENET_D = 'de-DE-Wavenet-D';
    public const VOICE_EN_AU_WAVENET_A = 'en-AU-Wavenet-A';
    public const VOICE_EN_AU_WAVENET_B = 'en-AU-Wavenet-B';
    public const VOICE_EN_AU_WAVENET_C = 'en-AU-Wavenet-C';
    public const VOICE_EN_AU_WAVENET_D = 'en-AU-Wavenet-D';
    public const VOICE_EN_GB_WAVENET_A = 'en-GB-Wavenet-A';
    public const VOICE_EN_GB_WAVENET_B = 'en-GB-Wavenet-B';
    public const VOICE_EN_GB_WAVENET_C = 'en-GB-Wavenet-C';
    public const VOICE_EN_GB_WAVENET_D = 'en-GB-Wavenet-D';
    public const VOICE_EN_US_WAVENET_A = 'en-US-Wavenet-A';
    public const VOICE_EN_US_WAVENET_B = 'en-US-Wavenet-B';
    public const VOICE_EN_US_WAVENET_C = 'en-US-Wavenet-C';
    public const VOICE_EN_US_WAVENET_E = 'en-US-Wavenet-E';
    public const VOICE_EN_US_WAVENET_F = 'en-US-Wavenet-F';
    public const VOICE_FR_FR_WAVENET_A = 'fr-FR-Wavenet-A';
    public const VOICE_FR_FR_WAVENET_B = 'fr-FR-Wavenet-B';
    public const VOICE_FR_FR_WAVENET_C = 'fr-FR-Wavenet-C';
    public const VOICE_FR_FR_WAVENET_D = 'fr-FR-Wavenet-D';
    public const VOICE_IT_IT_WAVENET_A = 'it-IT-Wavenet-A';
    public const VOICE_JA_JP_WAVENET_A = 'ja-JP-Wavenet-A';
    public const VOICE_NL_NL_WAVENET_A = 'nl-NL-Wavenet-A';
    public const VOICE_EN_GB_STANDARD_A = 'en-GB-Standard-A';
    public const VOICE_EN_GB_STANDARD_B = 'en-GB-Standard-B';
    public const VOICE_EN_GB_STANDARD_C = 'en-GB-Standard-C';
    public const VOICE_EN_GB_STANDARD_D = 'en-GB-Standard-D';
    public const VOICE_EN_US_STANDARD_B = 'en-US-Standard-B';
    public const VOICE_EN_US_STANDARD_C = 'en-US-Standard-C';
    public const VOICE_EN_US_STANDARD_D = 'en-US-Standard-D';
    public const VOICE_EN_US_STANDARD_E = 'en-US-Standard-E';
    public const VOICE_DE_DE_STANDARD_A = 'de-DE-Standard-A';
    public const VOICE_DE_DE_STANDARD_B = 'de-DE-Standard-B';
    public const VOICE_EN_AU_STANDARD_A = 'en-AU-Standard-A';
    public const VOICE_EN_AU_STANDARD_B = 'en-AU-Standard-B';
    public const VOICE_EN_AU_STANDARD_C = 'en-AU-Standard-C';
    public const VOICE_EN_AU_STANDARD_D = 'en-AU-Standard-D';
    public const VOICE_FR_CA_STANDARD_A = 'fr-CA-Standard-A';
    public const VOICE_FR_CA_STANDARD_B = 'fr-CA-Standard-B';
    public const VOICE_FR_CA_STANDARD_C = 'fr-CA-Standard-C';
    public const VOICE_FR_CA_STANDARD_D = 'fr-CA-Standard-D';
    public const VOICE_FR_FR_STANDARD_A = 'fr-FR-Standard-A';
    public const VOICE_FR_FR_STANDARD_B = 'fr-FR-Standard-B';
    public const VOICE_FR_FR_STANDARD_C = 'fr-FR-Standard-C';
    public const VOICE_FR_FR_STANDARD_D = 'fr-FR-Standard-D';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoiceAllowableValues()
    {
        return [
            self::VOICE_FEMALE_EN_US,
            self::VOICE_MALE_EN_US,
            self::VOICE_FEMALE_EN_CA,
            self::VOICE_FEMALE_EN_AU,
            self::VOICE_FEMALE_EN_GB,
            self::VOICE_MALE_EN_GB,
            self::VOICE_FEMALE_ES_US,
            self::VOICE_MALE_ES_US,
            self::VOICE_FEMALE_US_US,
            self::VOICE_FEMALE_ZH_CN,
            self::VOICE_MALE_ZH_CN,
            self::VOICE_FEMALE_ZH_HK,
            self::VOICE_FEMALE_ZH_TW,
            self::VOICE_FEMALE_JA_JP,
            self::VOICE_MALE_JA_JP,
            self::VOICE_FEMALE_KO_KR,
            self::VOICE_MALE_KO_KR,
            self::VOICE_FEMALE_DA_DK,
            self::VOICE_FEMALE_DE_DE,
            self::VOICE_MALE_DE_DE,
            self::VOICE_FEMALE_CA_ES,
            self::VOICE_FEMALE_ES_ES,
            self::VOICE_MALE_ES_ES,
            self::VOICE_FEMALE_FI_FI,
            self::VOICE_FEMALE_FR_CA,
            self::VOICE_MALE_FR_CA,
            self::VOICE_FEMALE_FR_FR,
            self::VOICE_MALE_FR_FR,
            self::VOICE_FEMALE_IT_IT,
            self::VOICE_MALE_IT_IT,
            self::VOICE_FEMALE_NB_NO,
            self::VOICE_FEMALE_NL_NL,
            self::VOICE_FEMALE_PL_PL,
            self::VOICE_FEMALE_PT_BR,
            self::VOICE_FEMALE_PT_PT,
            self::VOICE_MALE_PT_PT,
            self::VOICE_FEMALE_RU_RU,
            self::VOICE_MALE_RU_RU,
            self::VOICE_FEMALE_SV_SE,
            self::VOICE_FEMALE_HU_HU,
            self::VOICE_FEMALE_CS_CZ,
            self::VOICE_FEMALE_TR_TR,
            self::VOICE_MALE_TR_TR,
            self::VOICE_MALE_RU_RU_VLADIMIR,
            self::VOICE_FEMALE_RU_RU_JULIA,
            self::VOICE_FEMALE_RU_RU_ANNA,
            self::VOICE_FEMALE_RU_RU_VIKTORIA,
            self::VOICE_MALE_RU_RU_ALEXANDER,
            self::VOICE_FEMALE_RU_RU_MARIA,
            self::VOICE_FEMALE_RU_RU_LIDIA,
            self::VOICE_ES_ES_STANDARD_A,
            self::VOICE_IT_IT_STANDARD_A,
            self::VOICE_JA_JP_STANDARD_A,
            self::VOICE_KO_KR_STANDARD_A,
            self::VOICE_PT_BR_STANDARD_A,
            self::VOICE_TR_TR_STANDARD_A,
            self::VOICE_SV_SE_STANDARD_A,
            self::VOICE_NL_NL_STANDARD_A,
            self::VOICE_EN_US_WAVENET_D,
            self::VOICE_DE_DE_WAVENET_A,
            self::VOICE_DE_DE_WAVENET_B,
            self::VOICE_DE_DE_WAVENET_C,
            self::VOICE_DE_DE_WAVENET_D,
            self::VOICE_EN_AU_WAVENET_A,
            self::VOICE_EN_AU_WAVENET_B,
            self::VOICE_EN_AU_WAVENET_C,
            self::VOICE_EN_AU_WAVENET_D,
            self::VOICE_EN_GB_WAVENET_A,
            self::VOICE_EN_GB_WAVENET_B,
            self::VOICE_EN_GB_WAVENET_C,
            self::VOICE_EN_GB_WAVENET_D,
            self::VOICE_EN_US_WAVENET_A,
            self::VOICE_EN_US_WAVENET_B,
            self::VOICE_EN_US_WAVENET_C,
            self::VOICE_EN_US_WAVENET_E,
            self::VOICE_EN_US_WAVENET_F,
            self::VOICE_FR_FR_WAVENET_A,
            self::VOICE_FR_FR_WAVENET_B,
            self::VOICE_FR_FR_WAVENET_C,
            self::VOICE_FR_FR_WAVENET_D,
            self::VOICE_IT_IT_WAVENET_A,
            self::VOICE_JA_JP_WAVENET_A,
            self::VOICE_NL_NL_WAVENET_A,
            self::VOICE_EN_GB_STANDARD_A,
            self::VOICE_EN_GB_STANDARD_B,
            self::VOICE_EN_GB_STANDARD_C,
            self::VOICE_EN_GB_STANDARD_D,
            self::VOICE_EN_US_STANDARD_B,
            self::VOICE_EN_US_STANDARD_C,
            self::VOICE_EN_US_STANDARD_D,
            self::VOICE_EN_US_STANDARD_E,
            self::VOICE_DE_DE_STANDARD_A,
            self::VOICE_DE_DE_STANDARD_B,
            self::VOICE_EN_AU_STANDARD_A,
            self::VOICE_EN_AU_STANDARD_B,
            self::VOICE_EN_AU_STANDARD_C,
            self::VOICE_EN_AU_STANDARD_D,
            self::VOICE_FR_CA_STANDARD_A,
            self::VOICE_FR_CA_STANDARD_B,
            self::VOICE_FR_CA_STANDARD_C,
            self::VOICE_FR_CA_STANDARD_D,
            self::VOICE_FR_FR_STANDARD_A,
            self::VOICE_FR_FR_STANDARD_B,
            self::VOICE_FR_FR_STANDARD_C,
            self::VOICE_FR_FR_STANDARD_D,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('voice', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        $allowedValues = $this->getVoiceAllowableValues();
        if (!is_null($this->container['voice']) && !in_array($this->container['voice'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'voice', must be one of '%s'",
                $this->container['voice'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets voice
     *
     * @return string|null
     */
    public function getVoice()
    {
        return $this->container['voice'];
    }

    /**
     * Sets voice
     *
     * @param string|null $voice voice
     *
     * @return self
     */
    public function setVoice($voice)
    {
        if (is_null($voice)) {
            throw new \InvalidArgumentException('non-nullable voice cannot be null');
        }
        $allowedValues = $this->getVoiceAllowableValues();
        if (!in_array($voice, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'voice', must be one of '%s'",
                    $voice,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voice'] = $voice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


