<?php
/**
 * ModelsCallRecordingParameters
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * White Label Communications CPaas API Documentation
 *
 * A CPaaS platform API
 *
 * The version of the OpenAPI document: 1.1
 * Contact: support@whitelabelcomm.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModelsCallRecordingParameters Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModelsCallRecordingParameters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'models.CallRecordingParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enabled' => 'bool',
        'format' => 'string',
        'record_min_sec' => 'int',
        'record_on_answer' => 'bool',
        'record_on_bridge' => 'bool',
        'record_sample_rate' => 'int',
        'time_limit' => 'int',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enabled' => null,
        'format' => null,
        'record_min_sec' => null,
        'record_on_answer' => null,
        'record_on_bridge' => null,
        'record_sample_rate' => null,
        'time_limit' => null,
        'url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'enabled' => false,
        'format' => false,
        'record_min_sec' => false,
        'record_on_answer' => false,
        'record_on_bridge' => false,
        'record_sample_rate' => false,
        'time_limit' => false,
        'url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'format' => 'format',
        'record_min_sec' => 'record_min_sec',
        'record_on_answer' => 'record_on_answer',
        'record_on_bridge' => 'record_on_bridge',
        'record_sample_rate' => 'record_sample_rate',
        'time_limit' => 'time_limit',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'format' => 'setFormat',
        'record_min_sec' => 'setRecordMinSec',
        'record_on_answer' => 'setRecordOnAnswer',
        'record_on_bridge' => 'setRecordOnBridge',
        'record_sample_rate' => 'setRecordSampleRate',
        'time_limit' => 'setTimeLimit',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'format' => 'getFormat',
        'record_min_sec' => 'getRecordMinSec',
        'record_on_answer' => 'getRecordOnAnswer',
        'record_on_bridge' => 'getRecordOnBridge',
        'record_sample_rate' => 'getRecordSampleRate',
        'time_limit' => 'getTimeLimit',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FORMAT_MP3 = 'mp3';
    public const FORMAT_WAV = 'wav';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormatAllowableValues()
    {
        return [
            self::FORMAT_MP3,
            self::FORMAT_WAV,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('format', $data ?? [], null);
        $this->setIfExists('record_min_sec', $data ?? [], null);
        $this->setIfExists('record_on_answer', $data ?? [], null);
        $this->setIfExists('record_on_bridge', $data ?? [], null);
        $this->setIfExists('record_sample_rate', $data ?? [], null);
        $this->setIfExists('time_limit', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFormatAllowableValues();
        if (!is_null($this->container['format']) && !in_array($this->container['format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'format', must be one of '%s'",
                $this->container['format'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['time_limit']) && ($this->container['time_limit'] > 10800)) {
            $invalidProperties[] = "invalid value for 'time_limit', must be smaller than or equal to 10800.";
        }

        if (!is_null($this->container['time_limit']) && ($this->container['time_limit'] < 5)) {
            $invalidProperties[] = "invalid value for 'time_limit', must be bigger than or equal to 5.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string|null $format format
     *
     * @return self
     */
    public function setFormat($format)
    {
        if (is_null($format)) {
            throw new \InvalidArgumentException('non-nullable format cannot be null');
        }
        $allowedValues = $this->getFormatAllowableValues();
        if (!in_array($format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'format', must be one of '%s'",
                    $format,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets record_min_sec
     *
     * @return int|null
     */
    public function getRecordMinSec()
    {
        return $this->container['record_min_sec'];
    }

    /**
     * Sets record_min_sec
     *
     * @param int|null $record_min_sec record_min_sec
     *
     * @return self
     */
    public function setRecordMinSec($record_min_sec)
    {
        if (is_null($record_min_sec)) {
            throw new \InvalidArgumentException('non-nullable record_min_sec cannot be null');
        }
        $this->container['record_min_sec'] = $record_min_sec;

        return $this;
    }

    /**
     * Gets record_on_answer
     *
     * @return bool|null
     */
    public function getRecordOnAnswer()
    {
        return $this->container['record_on_answer'];
    }

    /**
     * Sets record_on_answer
     *
     * @param bool|null $record_on_answer record_on_answer
     *
     * @return self
     */
    public function setRecordOnAnswer($record_on_answer)
    {
        if (is_null($record_on_answer)) {
            throw new \InvalidArgumentException('non-nullable record_on_answer cannot be null');
        }
        $this->container['record_on_answer'] = $record_on_answer;

        return $this;
    }

    /**
     * Gets record_on_bridge
     *
     * @return bool|null
     */
    public function getRecordOnBridge()
    {
        return $this->container['record_on_bridge'];
    }

    /**
     * Sets record_on_bridge
     *
     * @param bool|null $record_on_bridge record_on_bridge
     *
     * @return self
     */
    public function setRecordOnBridge($record_on_bridge)
    {
        if (is_null($record_on_bridge)) {
            throw new \InvalidArgumentException('non-nullable record_on_bridge cannot be null');
        }
        $this->container['record_on_bridge'] = $record_on_bridge;

        return $this;
    }

    /**
     * Gets record_sample_rate
     *
     * @return int|null
     */
    public function getRecordSampleRate()
    {
        return $this->container['record_sample_rate'];
    }

    /**
     * Sets record_sample_rate
     *
     * @param int|null $record_sample_rate record_sample_rate
     *
     * @return self
     */
    public function setRecordSampleRate($record_sample_rate)
    {
        if (is_null($record_sample_rate)) {
            throw new \InvalidArgumentException('non-nullable record_sample_rate cannot be null');
        }
        $this->container['record_sample_rate'] = $record_sample_rate;

        return $this;
    }

    /**
     * Gets time_limit
     *
     * @return int|null
     */
    public function getTimeLimit()
    {
        return $this->container['time_limit'];
    }

    /**
     * Sets time_limit
     *
     * @param int|null $time_limit time_limit
     *
     * @return self
     */
    public function setTimeLimit($time_limit)
    {
        if (is_null($time_limit)) {
            throw new \InvalidArgumentException('non-nullable time_limit cannot be null');
        }

        if (($time_limit > 10800)) {
            throw new \InvalidArgumentException('invalid value for $time_limit when calling ModelsCallRecordingParameters., must be smaller than or equal to 10800.');
        }
        if (($time_limit < 5)) {
            throw new \InvalidArgumentException('invalid value for $time_limit when calling ModelsCallRecordingParameters., must be bigger than or equal to 5.');
        }

        $this->container['time_limit'] = $time_limit;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


